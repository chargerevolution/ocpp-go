// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package BootNotificationResponse

import "fmt"
import "encoding/json"
import "reflect"

// UnmarshalJSON implements json.Unmarshaler.
func (j *StatusInfoType) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["reasonCode"]; !ok || v == nil {
		return fmt.Errorf("field reasonCode in StatusInfoType: required")
	}
	type Plain StatusInfoType
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = StatusInfoType(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CustomDataType) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["vendorId"]; !ok || v == nil {
		return fmt.Errorf("field vendorId in CustomDataType: required")
	}
	type Plain CustomDataType
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CustomDataType(plain)
	return nil
}

type BootNotificationResponseJson struct {
	// This contains the CSMSâ€™s current time.
	//
	CurrentTime string `json:"currentTime" yaml:"currentTime"`

	// CustomData corresponds to the JSON schema field "customData".
	CustomData *CustomDataType `json:"customData,omitempty" yaml:"customData,omitempty"`

	// When &lt;&lt;cmn_registrationstatusenumtype,Status&gt;&gt; is Accepted, this
	// contains the heartbeat interval in seconds. If the CSMS returns something other
	// than Accepted, the value of the interval field indicates the minimum wait time
	// before sending a next BootNotification request.
	//
	Interval int `json:"interval" yaml:"interval"`

	// Status corresponds to the JSON schema field "status".
	Status RegistrationStatusEnumType_1 `json:"status" yaml:"status"`

	// StatusInfo corresponds to the JSON schema field "statusInfo".
	StatusInfo *StatusInfoType `json:"statusInfo,omitempty" yaml:"statusInfo,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *RegistrationStatusEnumType_1) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_RegistrationStatusEnumType_1 {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_RegistrationStatusEnumType_1, v)
	}
	*j = RegistrationStatusEnumType_1(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *RegistrationStatusEnumType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_RegistrationStatusEnumType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_RegistrationStatusEnumType, v)
	}
	*j = RegistrationStatusEnumType(v)
	return nil
}

// This class does not get 'AdditionalProperties = false' in the schema generation,
// so it can be extended with arbitrary JSON properties to allow adding custom
// data.
type CustomDataType struct {
	// VendorId corresponds to the JSON schema field "vendorId".
	VendorId string `json:"vendorId" yaml:"vendorId"`
}

type RegistrationStatusEnumType string

const RegistrationStatusEnumTypeAccepted RegistrationStatusEnumType = "Accepted"
const RegistrationStatusEnumTypePending RegistrationStatusEnumType = "Pending"
const RegistrationStatusEnumTypeRejected RegistrationStatusEnumType = "Rejected"

type RegistrationStatusEnumType_1 string

const RegistrationStatusEnumType_1_Accepted RegistrationStatusEnumType_1 = "Accepted"
const RegistrationStatusEnumType_1_Pending RegistrationStatusEnumType_1 = "Pending"
const RegistrationStatusEnumType_1_Rejected RegistrationStatusEnumType_1 = "Rejected"

// Element providing more information about the status.
//
type StatusInfoType struct {
	// Additional text to provide detailed information.
	//
	AdditionalInfo *string `json:"additionalInfo,omitempty" yaml:"additionalInfo,omitempty"`

	// CustomData corresponds to the JSON schema field "customData".
	CustomData *CustomDataType `json:"customData,omitempty" yaml:"customData,omitempty"`

	// A predefined code for the reason why the status is returned in this response.
	// The string is case-insensitive.
	//
	ReasonCode string `json:"reasonCode" yaml:"reasonCode"`
}

var enumValues_RegistrationStatusEnumType = []interface{}{
	"Accepted",
	"Pending",
	"Rejected",
}
var enumValues_RegistrationStatusEnumType_1 = []interface{}{
	"Accepted",
	"Pending",
	"Rejected",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BootNotificationResponseJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["currentTime"]; !ok || v == nil {
		return fmt.Errorf("field currentTime in BootNotificationResponseJson: required")
	}
	if v, ok := raw["interval"]; !ok || v == nil {
		return fmt.Errorf("field interval in BootNotificationResponseJson: required")
	}
	if v, ok := raw["status"]; !ok || v == nil {
		return fmt.Errorf("field status in BootNotificationResponseJson: required")
	}
	type Plain BootNotificationResponseJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = BootNotificationResponseJson(plain)
	return nil
}
