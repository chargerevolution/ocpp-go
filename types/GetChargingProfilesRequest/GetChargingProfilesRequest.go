// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package GetChargingProfilesRequest

import "fmt"
import "reflect"
import "encoding/json"

// UnmarshalJSON implements json.Unmarshaler.
func (j *CustomDataType) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["vendorId"]; !ok || v == nil {
		return fmt.Errorf("field vendorId in CustomDataType: required")
	}
	type Plain CustomDataType
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CustomDataType(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ChargingProfilePurposeEnumType_1) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ChargingProfilePurposeEnumType_1 {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ChargingProfilePurposeEnumType_1, v)
	}
	*j = ChargingProfilePurposeEnumType_1(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ChargingLimitSourceEnumType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ChargingLimitSourceEnumType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ChargingLimitSourceEnumType, v)
	}
	*j = ChargingLimitSourceEnumType(v)
	return nil
}

const ChargingLimitSourceEnumTypeEMS ChargingLimitSourceEnumType = "EMS"
const ChargingLimitSourceEnumTypeOther ChargingLimitSourceEnumType = "Other"
const ChargingLimitSourceEnumTypeSO ChargingLimitSourceEnumType = "SO"
const ChargingLimitSourceEnumTypeCSO ChargingLimitSourceEnumType = "CSO"

type ChargingLimitSourceEnumType_1 string

// UnmarshalJSON implements json.Unmarshaler.
func (j *ChargingProfileCriterionType) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	type Plain ChargingProfileCriterionType
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if len(plain.ChargingLimitSource) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "chargingLimitSource", 1)
	}
	if len(plain.ChargingLimitSource) > 4 {
		return fmt.Errorf("field %s length: must be <= %d", "chargingLimitSource", 4)
	}
	if len(plain.ChargingProfileId) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "chargingProfileId", 1)
	}
	*j = ChargingProfileCriterionType(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ChargingLimitSourceEnumType_1) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ChargingLimitSourceEnumType_1 {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ChargingLimitSourceEnumType_1, v)
	}
	*j = ChargingLimitSourceEnumType_1(v)
	return nil
}

const ChargingLimitSourceEnumType_1_EMS ChargingLimitSourceEnumType_1 = "EMS"
const ChargingLimitSourceEnumType_1_Other ChargingLimitSourceEnumType_1 = "Other"
const ChargingLimitSourceEnumType_1_SO ChargingLimitSourceEnumType_1 = "SO"
const ChargingLimitSourceEnumType_1_CSO ChargingLimitSourceEnumType_1 = "CSO"

type ChargingProfilePurposeEnumType string

// Charging_ Profile
// urn:x-oca:ocpp:uid:2:233255
// A ChargingProfile consists of ChargingSchedule, describing the amount of power
// or current that can be delivered per time interval.
//
type ChargingProfileCriterionType struct {
	// For which charging limit sources, charging profiles SHALL be reported. If
	// omitted, the Charging Station SHALL not filter on chargingLimitSource.
	//
	ChargingLimitSource []ChargingLimitSourceEnumType_1 `json:"chargingLimitSource,omitempty" yaml:"chargingLimitSource,omitempty"`

	// List of all the chargingProfileIds requested. Any ChargingProfile that matches
	// one of these profiles will be reported. If omitted, the Charging Station SHALL
	// not filter on chargingProfileId. This field SHALL NOT contain more ids than set
	// in
	// &lt;&lt;configkey-charging-profile-entries,ChargingProfileEntries.maxLimit&gt;&gt;
	//
	//
	ChargingProfileId []int `json:"chargingProfileId,omitempty" yaml:"chargingProfileId,omitempty"`

	// ChargingProfilePurpose corresponds to the JSON schema field
	// "chargingProfilePurpose".
	ChargingProfilePurpose *ChargingProfilePurposeEnumType `json:"chargingProfilePurpose,omitempty" yaml:"chargingProfilePurpose,omitempty"`

	// CustomData corresponds to the JSON schema field "customData".
	CustomData *CustomDataType `json:"customData,omitempty" yaml:"customData,omitempty"`

	// Charging_ Profile. Stack_ Level. Counter
	// urn:x-oca:ocpp:uid:1:569230
	// Value determining level in hierarchy stack of profiles. Higher values have
	// precedence over lower values. Lowest level is 0.
	//
	StackLevel *int `json:"stackLevel,omitempty" yaml:"stackLevel,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ChargingProfilePurposeEnumType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ChargingProfilePurposeEnumType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ChargingProfilePurposeEnumType, v)
	}
	*j = ChargingProfilePurposeEnumType(v)
	return nil
}

type ChargingLimitSourceEnumType string

const ChargingProfilePurposeEnumTypeChargingStationExternalConstraints ChargingProfilePurposeEnumType = "ChargingStationExternalConstraints"
const ChargingProfilePurposeEnumTypeChargingStationMaxProfile ChargingProfilePurposeEnumType = "ChargingStationMaxProfile"
const ChargingProfilePurposeEnumTypeTxDefaultProfile ChargingProfilePurposeEnumType = "TxDefaultProfile"
const ChargingProfilePurposeEnumTypeTxProfile ChargingProfilePurposeEnumType = "TxProfile"

type ChargingProfilePurposeEnumType_1 string

const ChargingProfilePurposeEnumType_1_ChargingStationExternalConstraints ChargingProfilePurposeEnumType_1 = "ChargingStationExternalConstraints"
const ChargingProfilePurposeEnumType_1_ChargingStationMaxProfile ChargingProfilePurposeEnumType_1 = "ChargingStationMaxProfile"
const ChargingProfilePurposeEnumType_1_TxDefaultProfile ChargingProfilePurposeEnumType_1 = "TxDefaultProfile"
const ChargingProfilePurposeEnumType_1_TxProfile ChargingProfilePurposeEnumType_1 = "TxProfile"

// This class does not get 'AdditionalProperties = false' in the schema generation,
// so it can be extended with arbitrary JSON properties to allow adding custom
// data.
type CustomDataType struct {
	// VendorId corresponds to the JSON schema field "vendorId".
	VendorId string `json:"vendorId" yaml:"vendorId"`
}

type GetChargingProfilesRequestJson struct {
	// ChargingProfile corresponds to the JSON schema field "chargingProfile".
	ChargingProfile ChargingProfileCriterionType `json:"chargingProfile" yaml:"chargingProfile"`

	// CustomData corresponds to the JSON schema field "customData".
	CustomData *CustomDataType `json:"customData,omitempty" yaml:"customData,omitempty"`

	// For which EVSE installed charging profiles SHALL be reported. If 0, only
	// charging profiles installed on the Charging Station itself (the grid
	// connection) SHALL be reported. If omitted, all installed charging profiles
	// SHALL be reported.
	//
	EvseId *int `json:"evseId,omitempty" yaml:"evseId,omitempty"`

	// Reference identification that is to be used by the Charging Station in the
	// &lt;&lt;reportchargingprofilesrequest, ReportChargingProfilesRequest&gt;&gt;
	// when provided.
	//
	RequestId int `json:"requestId" yaml:"requestId"`
}

var enumValues_ChargingLimitSourceEnumType = []interface{}{
	"EMS",
	"Other",
	"SO",
	"CSO",
}
var enumValues_ChargingLimitSourceEnumType_1 = []interface{}{
	"EMS",
	"Other",
	"SO",
	"CSO",
}
var enumValues_ChargingProfilePurposeEnumType = []interface{}{
	"ChargingStationExternalConstraints",
	"ChargingStationMaxProfile",
	"TxDefaultProfile",
	"TxProfile",
}
var enumValues_ChargingProfilePurposeEnumType_1 = []interface{}{
	"ChargingStationExternalConstraints",
	"ChargingStationMaxProfile",
	"TxDefaultProfile",
	"TxProfile",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetChargingProfilesRequestJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["chargingProfile"]; !ok || v == nil {
		return fmt.Errorf("field chargingProfile in GetChargingProfilesRequestJson: required")
	}
	if v, ok := raw["requestId"]; !ok || v == nil {
		return fmt.Errorf("field requestId in GetChargingProfilesRequestJson: required")
	}
	type Plain GetChargingProfilesRequestJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = GetChargingProfilesRequestJson(plain)
	return nil
}
