// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package NotifyReportRequest

import "fmt"
import "reflect"
import "encoding/json"

type AttributeEnumType string

const AttributeEnumTypeActual AttributeEnumType = "Actual"
const AttributeEnumTypeMaxSet AttributeEnumType = "MaxSet"
const AttributeEnumTypeMinSet AttributeEnumType = "MinSet"
const AttributeEnumTypeTarget AttributeEnumType = "Target"

type AttributeEnumType_1 string

const AttributeEnumType_1_Actual AttributeEnumType_1 = "Actual"
const AttributeEnumType_1_MaxSet AttributeEnumType_1 = "MaxSet"
const AttributeEnumType_1_MinSet AttributeEnumType_1 = "MinSet"
const AttributeEnumType_1_Target AttributeEnumType_1 = "Target"

// A physical or logical component
//
type ComponentType struct {
	// CustomData corresponds to the JSON schema field "customData".
	CustomData *CustomDataType `json:"customData,omitempty" yaml:"customData,omitempty"`

	// Evse corresponds to the JSON schema field "evse".
	Evse *EVSEType `json:"evse,omitempty" yaml:"evse,omitempty"`

	// Name of instance in case the component exists as multiple instances. Case
	// Insensitive. strongly advised to use Camel Case.
	//
	Instance *string `json:"instance,omitempty" yaml:"instance,omitempty"`

	// Name of the component. Name should be taken from the list of standardized
	// component names whenever possible. Case Insensitive. strongly advised to use
	// Camel Case.
	//
	Name string `json:"name" yaml:"name"`
}

// This class does not get 'AdditionalProperties = false' in the schema generation,
// so it can be extended with arbitrary JSON properties to allow adding custom
// data.
type CustomDataType struct {
	// VendorId corresponds to the JSON schema field "vendorId".
	VendorId string `json:"vendorId" yaml:"vendorId"`
}

type DataEnumType string

const DataEnumTypeBoolean DataEnumType = "boolean"
const DataEnumTypeDateTime DataEnumType = "dateTime"
const DataEnumTypeDecimal DataEnumType = "decimal"
const DataEnumTypeInteger DataEnumType = "integer"
const DataEnumTypeMemberList DataEnumType = "MemberList"
const DataEnumTypeOptionList DataEnumType = "OptionList"
const DataEnumTypeSequenceList DataEnumType = "SequenceList"
const DataEnumTypeString DataEnumType = "string"

type DataEnumType_1 string

const DataEnumType_1_Boolean DataEnumType_1 = "boolean"
const DataEnumType_1_DateTime DataEnumType_1 = "dateTime"
const DataEnumType_1_Decimal DataEnumType_1 = "decimal"
const DataEnumType_1_Integer DataEnumType_1 = "integer"
const DataEnumType_1_MemberList DataEnumType_1 = "MemberList"
const DataEnumType_1_OptionList DataEnumType_1 = "OptionList"
const DataEnumType_1_SequenceList DataEnumType_1 = "SequenceList"
const DataEnumType_1_String DataEnumType_1 = "string"

// EVSE
// urn:x-oca:ocpp:uid:2:233123
// Electric Vehicle Supply Equipment
//
type EVSEType struct {
	// An id to designate a specific connector (on an EVSE) by connector index number.
	//
	ConnectorId *int `json:"connectorId,omitempty" yaml:"connectorId,omitempty"`

	// CustomData corresponds to the JSON schema field "customData".
	CustomData *CustomDataType `json:"customData,omitempty" yaml:"customData,omitempty"`

	// Identified_ Object. MRID. Numeric_ Identifier
	// urn:x-enexis:ecdm:uid:1:569198
	// EVSE Identifier. This contains a number (&gt; 0) designating an EVSE of the
	// Charging Station.
	//
	Id int `json:"id" yaml:"id"`
}

type MutabilityEnumType string

const MutabilityEnumTypeReadOnly MutabilityEnumType = "ReadOnly"
const MutabilityEnumTypeReadWrite MutabilityEnumType = "ReadWrite"
const MutabilityEnumTypeWriteOnly MutabilityEnumType = "WriteOnly"

type MutabilityEnumType_1 string

// UnmarshalJSON implements json.Unmarshaler.
func (j *MutabilityEnumType_1) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_MutabilityEnumType_1 {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_MutabilityEnumType_1, v)
	}
	*j = MutabilityEnumType_1(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *VariableType) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in VariableType: required")
	}
	type Plain VariableType
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = VariableType(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MutabilityEnumType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_MutabilityEnumType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_MutabilityEnumType, v)
	}
	*j = MutabilityEnumType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DataEnumType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_DataEnumType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_DataEnumType, v)
	}
	*j = DataEnumType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AttributeEnumType_1) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AttributeEnumType_1 {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AttributeEnumType_1, v)
	}
	*j = AttributeEnumType_1(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *VariableCharacteristicsType) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["dataType"]; !ok || v == nil {
		return fmt.Errorf("field dataType in VariableCharacteristicsType: required")
	}
	if v, ok := raw["supportsMonitoring"]; !ok || v == nil {
		return fmt.Errorf("field supportsMonitoring in VariableCharacteristicsType: required")
	}
	type Plain VariableCharacteristicsType
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = VariableCharacteristicsType(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ComponentType) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in ComponentType: required")
	}
	type Plain ComponentType
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ComponentType(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *EVSEType) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id in EVSEType: required")
	}
	type Plain EVSEType
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = EVSEType(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CustomDataType) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["vendorId"]; !ok || v == nil {
		return fmt.Errorf("field vendorId in CustomDataType: required")
	}
	type Plain CustomDataType
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CustomDataType(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AttributeEnumType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AttributeEnumType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AttributeEnumType, v)
	}
	*j = AttributeEnumType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *VariableAttributeType) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	type Plain VariableAttributeType
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["constant"]; !ok || v == nil {
		plain.Constant = false
	}
	if v, ok := raw["persistent"]; !ok || v == nil {
		plain.Persistent = false
	}
	*j = VariableAttributeType(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ReportDataType) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["component"]; !ok || v == nil {
		return fmt.Errorf("field component in ReportDataType: required")
	}
	if v, ok := raw["variable"]; !ok || v == nil {
		return fmt.Errorf("field variable in ReportDataType: required")
	}
	if v, ok := raw["variableAttribute"]; !ok || v == nil {
		return fmt.Errorf("field variableAttribute in ReportDataType: required")
	}
	type Plain ReportDataType
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if len(plain.VariableAttribute) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "variableAttribute", 1)
	}
	if len(plain.VariableAttribute) > 4 {
		return fmt.Errorf("field %s length: must be <= %d", "variableAttribute", 4)
	}
	*j = ReportDataType(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DataEnumType_1) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_DataEnumType_1 {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_DataEnumType_1, v)
	}
	*j = DataEnumType_1(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NotifyReportRequestJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["generatedAt"]; !ok || v == nil {
		return fmt.Errorf("field generatedAt in NotifyReportRequestJson: required")
	}
	if v, ok := raw["requestId"]; !ok || v == nil {
		return fmt.Errorf("field requestId in NotifyReportRequestJson: required")
	}
	if v, ok := raw["seqNo"]; !ok || v == nil {
		return fmt.Errorf("field seqNo in NotifyReportRequestJson: required")
	}
	type Plain NotifyReportRequestJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if len(plain.ReportData) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "reportData", 1)
	}
	if v, ok := raw["tbc"]; !ok || v == nil {
		plain.Tbc = false
	}
	*j = NotifyReportRequestJson(plain)
	return nil
}

const MutabilityEnumType_1_ReadOnly MutabilityEnumType_1 = "ReadOnly"
const MutabilityEnumType_1_ReadWrite MutabilityEnumType_1 = "ReadWrite"
const MutabilityEnumType_1_WriteOnly MutabilityEnumType_1 = "WriteOnly"

type NotifyReportRequestJson struct {
	// CustomData corresponds to the JSON schema field "customData".
	CustomData *CustomDataType `json:"customData,omitempty" yaml:"customData,omitempty"`

	// Timestamp of the moment this message was generated at the Charging Station.
	//
	GeneratedAt string `json:"generatedAt" yaml:"generatedAt"`

	// ReportData corresponds to the JSON schema field "reportData".
	ReportData []ReportDataType `json:"reportData,omitempty" yaml:"reportData,omitempty"`

	// The id of the GetReportRequest  or GetBaseReportRequest that requested this
	// report
	//
	RequestId int `json:"requestId" yaml:"requestId"`

	// Sequence number of this message. First message starts at 0.
	//
	SeqNo int `json:"seqNo" yaml:"seqNo"`

	// “to be continued” indicator. Indicates whether another part of the report
	// follows in an upcoming notifyReportRequest message. Default value when omitted
	// is false.
	//
	//
	Tbc bool `json:"tbc,omitempty" yaml:"tbc,omitempty"`
}

// Class to report components, variables and variable attributes and
// characteristics.
//
type ReportDataType struct {
	// Component corresponds to the JSON schema field "component".
	Component ComponentType `json:"component" yaml:"component"`

	// CustomData corresponds to the JSON schema field "customData".
	CustomData *CustomDataType `json:"customData,omitempty" yaml:"customData,omitempty"`

	// Variable corresponds to the JSON schema field "variable".
	Variable VariableType `json:"variable" yaml:"variable"`

	// VariableAttribute corresponds to the JSON schema field "variableAttribute".
	VariableAttribute []VariableAttributeType `json:"variableAttribute" yaml:"variableAttribute"`

	// VariableCharacteristics corresponds to the JSON schema field
	// "variableCharacteristics".
	VariableCharacteristics *VariableCharacteristicsType `json:"variableCharacteristics,omitempty" yaml:"variableCharacteristics,omitempty"`
}

// Attribute data of a variable.
//
type VariableAttributeType struct {
	// If true, value that will never be changed by the Charging Station at runtime.
	// Default when omitted is false.
	//
	Constant bool `json:"constant,omitempty" yaml:"constant,omitempty"`

	// CustomData corresponds to the JSON schema field "customData".
	CustomData *CustomDataType `json:"customData,omitempty" yaml:"customData,omitempty"`

	// Mutability corresponds to the JSON schema field "mutability".
	Mutability *MutabilityEnumType_1 `json:"mutability,omitempty" yaml:"mutability,omitempty"`

	// If true, value will be persistent across system reboots or power down. Default
	// when omitted is false.
	//
	Persistent bool `json:"persistent,omitempty" yaml:"persistent,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *AttributeEnumType_1 `json:"type,omitempty" yaml:"type,omitempty"`

	// Value of the attribute. May only be omitted when mutability is set to
	// 'WriteOnly'.
	//
	// The Configuration Variable
	// &lt;&lt;configkey-reporting-value-size,ReportingValueSize&gt;&gt; can be used
	// to limit GetVariableResult.attributeValue, VariableAttribute.value and
	// EventData.actualValue. The max size of these values will always remain equal.
	//
	Value *string `json:"value,omitempty" yaml:"value,omitempty"`
}

// Fixed read-only parameters of a variable.
//
type VariableCharacteristicsType struct {
	// CustomData corresponds to the JSON schema field "customData".
	CustomData *CustomDataType `json:"customData,omitempty" yaml:"customData,omitempty"`

	// DataType corresponds to the JSON schema field "dataType".
	DataType DataEnumType_1 `json:"dataType" yaml:"dataType"`

	// Maximum possible value of this variable. When the datatype of this Variable is
	// String, OptionList, SequenceList or MemberList, this field defines the maximum
	// length of the (CSV) string.
	//
	MaxLimit *float64 `json:"maxLimit,omitempty" yaml:"maxLimit,omitempty"`

	// Minimum possible value of this variable.
	//
	MinLimit *float64 `json:"minLimit,omitempty" yaml:"minLimit,omitempty"`

	// Flag indicating if this variable supports monitoring.
	//
	SupportsMonitoring bool `json:"supportsMonitoring" yaml:"supportsMonitoring"`

	// Unit of the variable. When the transmitted value has a unit, this field SHALL
	// be included.
	//
	Unit *string `json:"unit,omitempty" yaml:"unit,omitempty"`

	// Allowed values when variable is Option/Member/SequenceList.
	//
	// * OptionList: The (Actual) Variable value must be a single value from the
	// reported (CSV) enumeration list.
	//
	// * MemberList: The (Actual) Variable value  may be an (unordered) (sub-)set of
	// the reported (CSV) valid values list.
	//
	// * SequenceList: The (Actual) Variable value  may be an ordered (priority, etc)
	// (sub-)set of the reported (CSV) valid values.
	//
	// This is a comma separated list.
	//
	// The Configuration Variable
	// &lt;&lt;configkey-configuration-value-size,ConfigurationValueSize&gt;&gt; can
	// be used to limit SetVariableData.attributeValue and
	// VariableCharacteristics.valueList. The max size of these values will always
	// remain equal.
	//
	//
	ValuesList *string `json:"valuesList,omitempty" yaml:"valuesList,omitempty"`
}

// Reference key to a component-variable.
//
type VariableType struct {
	// CustomData corresponds to the JSON schema field "customData".
	CustomData *CustomDataType `json:"customData,omitempty" yaml:"customData,omitempty"`

	// Name of instance in case the variable exists as multiple instances. Case
	// Insensitive. strongly advised to use Camel Case.
	//
	Instance *string `json:"instance,omitempty" yaml:"instance,omitempty"`

	// Name of the variable. Name should be taken from the list of standardized
	// variable names whenever possible. Case Insensitive. strongly advised to use
	// Camel Case.
	//
	Name string `json:"name" yaml:"name"`
}

var enumValues_AttributeEnumType = []interface{}{
	"Actual",
	"Target",
	"MinSet",
	"MaxSet",
}
var enumValues_AttributeEnumType_1 = []interface{}{
	"Actual",
	"Target",
	"MinSet",
	"MaxSet",
}
var enumValues_DataEnumType = []interface{}{
	"string",
	"decimal",
	"integer",
	"dateTime",
	"boolean",
	"OptionList",
	"SequenceList",
	"MemberList",
}
var enumValues_DataEnumType_1 = []interface{}{
	"string",
	"decimal",
	"integer",
	"dateTime",
	"boolean",
	"OptionList",
	"SequenceList",
	"MemberList",
}
var enumValues_MutabilityEnumType = []interface{}{
	"ReadOnly",
	"WriteOnly",
	"ReadWrite",
}
var enumValues_MutabilityEnumType_1 = []interface{}{
	"ReadOnly",
	"WriteOnly",
	"ReadWrite",
}
