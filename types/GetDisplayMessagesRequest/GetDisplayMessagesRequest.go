// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package GetDisplayMessagesRequest

import "fmt"
import "encoding/json"
import "reflect"

// This class does not get 'AdditionalProperties = false' in the schema generation,
// so it can be extended with arbitrary JSON properties to allow adding custom
// data.
type CustomDataType struct {
	// VendorId corresponds to the JSON schema field "vendorId".
	VendorId string `json:"vendorId" yaml:"vendorId"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CustomDataType) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["vendorId"]; !ok || v == nil {
		return fmt.Errorf("field vendorId in CustomDataType: required")
	}
	type Plain CustomDataType
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CustomDataType(plain)
	return nil
}

type GetDisplayMessagesRequestJson struct {
	// CustomData corresponds to the JSON schema field "customData".
	CustomData *CustomDataType `json:"customData,omitempty" yaml:"customData,omitempty"`

	// If provided the Charging Station shall return Display Messages of the given
	// ids. This field SHALL NOT contain more ids than set in
	// &lt;&lt;configkey-number-of-display-messages,NumberOfDisplayMessages.maxLimit&gt;&gt;
	//
	//
	Id []int `json:"id,omitempty" yaml:"id,omitempty"`

	// Priority corresponds to the JSON schema field "priority".
	Priority *MessagePriorityEnumType_1 `json:"priority,omitempty" yaml:"priority,omitempty"`

	// The Id of this request.
	//
	RequestId int `json:"requestId" yaml:"requestId"`

	// State corresponds to the JSON schema field "state".
	State *MessageStateEnumType_1 `json:"state,omitempty" yaml:"state,omitempty"`
}

type MessagePriorityEnumType string

// UnmarshalJSON implements json.Unmarshaler.
func (j *MessagePriorityEnumType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_MessagePriorityEnumType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_MessagePriorityEnumType, v)
	}
	*j = MessagePriorityEnumType(v)
	return nil
}

const MessagePriorityEnumTypeAlwaysFront MessagePriorityEnumType = "AlwaysFront"
const MessagePriorityEnumTypeInFront MessagePriorityEnumType = "InFront"
const MessagePriorityEnumTypeNormalCycle MessagePriorityEnumType = "NormalCycle"

// UnmarshalJSON implements json.Unmarshaler.
func (j *MessageStateEnumType_1) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_MessageStateEnumType_1 {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_MessageStateEnumType_1, v)
	}
	*j = MessageStateEnumType_1(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MessagePriorityEnumType_1) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_MessagePriorityEnumType_1 {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_MessagePriorityEnumType_1, v)
	}
	*j = MessagePriorityEnumType_1(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MessageStateEnumType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_MessageStateEnumType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_MessageStateEnumType, v)
	}
	*j = MessageStateEnumType(v)
	return nil
}

type MessagePriorityEnumType_1 string

const MessagePriorityEnumType_1_AlwaysFront MessagePriorityEnumType_1 = "AlwaysFront"
const MessagePriorityEnumType_1_InFront MessagePriorityEnumType_1 = "InFront"
const MessagePriorityEnumType_1_NormalCycle MessagePriorityEnumType_1 = "NormalCycle"

type MessageStateEnumType string

const MessageStateEnumTypeCharging MessageStateEnumType = "Charging"
const MessageStateEnumTypeFaulted MessageStateEnumType = "Faulted"
const MessageStateEnumTypeIdle MessageStateEnumType = "Idle"
const MessageStateEnumTypeUnavailable MessageStateEnumType = "Unavailable"

type MessageStateEnumType_1 string

const MessageStateEnumType_1_Charging MessageStateEnumType_1 = "Charging"
const MessageStateEnumType_1_Faulted MessageStateEnumType_1 = "Faulted"
const MessageStateEnumType_1_Idle MessageStateEnumType_1 = "Idle"
const MessageStateEnumType_1_Unavailable MessageStateEnumType_1 = "Unavailable"

var enumValues_MessagePriorityEnumType = []interface{}{
	"AlwaysFront",
	"InFront",
	"NormalCycle",
}
var enumValues_MessagePriorityEnumType_1 = []interface{}{
	"AlwaysFront",
	"InFront",
	"NormalCycle",
}
var enumValues_MessageStateEnumType = []interface{}{
	"Charging",
	"Faulted",
	"Idle",
	"Unavailable",
}
var enumValues_MessageStateEnumType_1 = []interface{}{
	"Charging",
	"Faulted",
	"Idle",
	"Unavailable",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetDisplayMessagesRequestJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["requestId"]; !ok || v == nil {
		return fmt.Errorf("field requestId in GetDisplayMessagesRequestJson: required")
	}
	type Plain GetDisplayMessagesRequestJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if len(plain.Id) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "id", 1)
	}
	*j = GetDisplayMessagesRequestJson(plain)
	return nil
}
