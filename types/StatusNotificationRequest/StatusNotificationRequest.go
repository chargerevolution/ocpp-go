// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package StatusNotificationRequest

import "fmt"
import "reflect"
import "encoding/json"

// UnmarshalJSON implements json.Unmarshaler.
func (j *CustomDataType) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["vendorId"]; !ok || v == nil {
		return fmt.Errorf("field vendorId in CustomDataType: required")
	}
	type Plain CustomDataType
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CustomDataType(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ConnectorStatusEnumType_1) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ConnectorStatusEnumType_1 {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ConnectorStatusEnumType_1, v)
	}
	*j = ConnectorStatusEnumType_1(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ConnectorStatusEnumType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ConnectorStatusEnumType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ConnectorStatusEnumType, v)
	}
	*j = ConnectorStatusEnumType(v)
	return nil
}

type ConnectorStatusEnumType string

const ConnectorStatusEnumTypeAvailable ConnectorStatusEnumType = "Available"
const ConnectorStatusEnumTypeFaulted ConnectorStatusEnumType = "Faulted"
const ConnectorStatusEnumTypeOccupied ConnectorStatusEnumType = "Occupied"
const ConnectorStatusEnumTypeReserved ConnectorStatusEnumType = "Reserved"
const ConnectorStatusEnumTypeUnavailable ConnectorStatusEnumType = "Unavailable"

type ConnectorStatusEnumType_1 string

const ConnectorStatusEnumType_1_Available ConnectorStatusEnumType_1 = "Available"
const ConnectorStatusEnumType_1_Faulted ConnectorStatusEnumType_1 = "Faulted"
const ConnectorStatusEnumType_1_Occupied ConnectorStatusEnumType_1 = "Occupied"
const ConnectorStatusEnumType_1_Reserved ConnectorStatusEnumType_1 = "Reserved"
const ConnectorStatusEnumType_1_Unavailable ConnectorStatusEnumType_1 = "Unavailable"

// This class does not get 'AdditionalProperties = false' in the schema generation,
// so it can be extended with arbitrary JSON properties to allow adding custom
// data.
type CustomDataType struct {
	// VendorId corresponds to the JSON schema field "vendorId".
	VendorId string `json:"vendorId" yaml:"vendorId"`
}

type StatusNotificationRequestJson struct {
	// The id of the connector within the EVSE for which the status is reported.
	//
	ConnectorId int `json:"connectorId" yaml:"connectorId"`

	// ConnectorStatus corresponds to the JSON schema field "connectorStatus".
	ConnectorStatus ConnectorStatusEnumType_1 `json:"connectorStatus" yaml:"connectorStatus"`

	// CustomData corresponds to the JSON schema field "customData".
	CustomData *CustomDataType `json:"customData,omitempty" yaml:"customData,omitempty"`

	// The id of the EVSE to which the connector belongs for which the the status is
	// reported.
	//
	EvseId int `json:"evseId" yaml:"evseId"`

	// The time for which the status is reported. If absent time of receipt of the
	// message will be assumed.
	//
	Timestamp string `json:"timestamp" yaml:"timestamp"`
}

var enumValues_ConnectorStatusEnumType = []interface{}{
	"Available",
	"Occupied",
	"Reserved",
	"Unavailable",
	"Faulted",
}
var enumValues_ConnectorStatusEnumType_1 = []interface{}{
	"Available",
	"Occupied",
	"Reserved",
	"Unavailable",
	"Faulted",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *StatusNotificationRequestJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["connectorId"]; !ok || v == nil {
		return fmt.Errorf("field connectorId in StatusNotificationRequestJson: required")
	}
	if v, ok := raw["connectorStatus"]; !ok || v == nil {
		return fmt.Errorf("field connectorStatus in StatusNotificationRequestJson: required")
	}
	if v, ok := raw["evseId"]; !ok || v == nil {
		return fmt.Errorf("field evseId in StatusNotificationRequestJson: required")
	}
	if v, ok := raw["timestamp"]; !ok || v == nil {
		return fmt.Errorf("field timestamp in StatusNotificationRequestJson: required")
	}
	type Plain StatusNotificationRequestJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = StatusNotificationRequestJson(plain)
	return nil
}
