// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package main

import "fmt"
import "reflect"
import "encoding/json"

// UnmarshalJSON implements json.Unmarshaler.
func (j *CustomDataType) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["vendorId"]; !ok || v == nil {
		return fmt.Errorf("field vendorId in CustomDataType: required")
	}
	type Plain CustomDataType
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CustomDataType(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ChargingLimitSourceEnumType_1) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ChargingLimitSourceEnumType_1 {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ChargingLimitSourceEnumType_1, v)
	}
	*j = ChargingLimitSourceEnumType_1(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ChargingLimitSourceEnumType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ChargingLimitSourceEnumType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ChargingLimitSourceEnumType, v)
	}
	*j = ChargingLimitSourceEnumType(v)
	return nil
}

type ChargingLimitSourceEnumType string

const ChargingLimitSourceEnumTypeCSO ChargingLimitSourceEnumType = "CSO"
const ChargingLimitSourceEnumTypeEMS ChargingLimitSourceEnumType = "EMS"
const ChargingLimitSourceEnumTypeOther ChargingLimitSourceEnumType = "Other"
const ChargingLimitSourceEnumTypeSO ChargingLimitSourceEnumType = "SO"

type ChargingLimitSourceEnumType_1 string

const ChargingLimitSourceEnumType_1_CSO ChargingLimitSourceEnumType_1 = "CSO"
const ChargingLimitSourceEnumType_1_EMS ChargingLimitSourceEnumType_1 = "EMS"
const ChargingLimitSourceEnumType_1_Other ChargingLimitSourceEnumType_1 = "Other"
const ChargingLimitSourceEnumType_1_SO ChargingLimitSourceEnumType_1 = "SO"

type ClearedChargingLimitRequestJson struct {
	// ChargingLimitSource corresponds to the JSON schema field "chargingLimitSource".
	ChargingLimitSource ChargingLimitSourceEnumType_1 `json:"chargingLimitSource" yaml:"chargingLimitSource"`

	// CustomData corresponds to the JSON schema field "customData".
	CustomData *CustomDataType `json:"customData,omitempty" yaml:"customData,omitempty"`

	// EVSE Identifier.
	//
	EvseId *int `json:"evseId,omitempty" yaml:"evseId,omitempty"`
}

// This class does not get 'AdditionalProperties = false' in the schema generation,
// so it can be extended with arbitrary JSON properties to allow adding custom
// data.
type CustomDataType struct {
	// VendorId corresponds to the JSON schema field "vendorId".
	VendorId string `json:"vendorId" yaml:"vendorId"`
}

var enumValues_ChargingLimitSourceEnumType = []interface{}{
	"EMS",
	"Other",
	"SO",
	"CSO",
}
var enumValues_ChargingLimitSourceEnumType_1 = []interface{}{
	"EMS",
	"Other",
	"SO",
	"CSO",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ClearedChargingLimitRequestJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["chargingLimitSource"]; !ok || v == nil {
		return fmt.Errorf("field chargingLimitSource in ClearedChargingLimitRequestJson: required")
	}
	type Plain ClearedChargingLimitRequestJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ClearedChargingLimitRequestJson(plain)
	return nil
}
