// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package InstallCertificateRequest

import "fmt"
import "encoding/json"
import "reflect"

// UnmarshalJSON implements json.Unmarshaler.
func (j *InstallCertificateUseEnumType_1) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_InstallCertificateUseEnumType_1 {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_InstallCertificateUseEnumType_1, v)
	}
	*j = InstallCertificateUseEnumType_1(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CustomDataType) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["vendorId"]; !ok || v == nil {
		return fmt.Errorf("field vendorId in CustomDataType: required")
	}
	type Plain CustomDataType
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CustomDataType(plain)
	return nil
}

// This class does not get 'AdditionalProperties = false' in the schema generation,
// so it can be extended with arbitrary JSON properties to allow adding custom
// data.
type CustomDataType struct {
	// VendorId corresponds to the JSON schema field "vendorId".
	VendorId string `json:"vendorId" yaml:"vendorId"`
}

type InstallCertificateUseEnumType string

// UnmarshalJSON implements json.Unmarshaler.
func (j *InstallCertificateUseEnumType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_InstallCertificateUseEnumType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_InstallCertificateUseEnumType, v)
	}
	*j = InstallCertificateUseEnumType(v)
	return nil
}

type InstallCertificateRequestJson struct {
	// A PEM encoded X.509 certificate.
	//
	Certificate string `json:"certificate" yaml:"certificate"`

	// CertificateType corresponds to the JSON schema field "certificateType".
	CertificateType InstallCertificateUseEnumType_1 `json:"certificateType" yaml:"certificateType"`

	// CustomData corresponds to the JSON schema field "customData".
	CustomData *CustomDataType `json:"customData,omitempty" yaml:"customData,omitempty"`
}

const InstallCertificateUseEnumTypeCSMSRootCertificate InstallCertificateUseEnumType = "CSMSRootCertificate"
const InstallCertificateUseEnumTypeMORootCertificate InstallCertificateUseEnumType = "MORootCertificate"
const InstallCertificateUseEnumTypeManufacturerRootCertificate InstallCertificateUseEnumType = "ManufacturerRootCertificate"
const InstallCertificateUseEnumTypeV2GRootCertificate InstallCertificateUseEnumType = "V2GRootCertificate"

type InstallCertificateUseEnumType_1 string

const InstallCertificateUseEnumType_1_CSMSRootCertificate InstallCertificateUseEnumType_1 = "CSMSRootCertificate"
const InstallCertificateUseEnumType_1_MORootCertificate InstallCertificateUseEnumType_1 = "MORootCertificate"
const InstallCertificateUseEnumType_1_ManufacturerRootCertificate InstallCertificateUseEnumType_1 = "ManufacturerRootCertificate"
const InstallCertificateUseEnumType_1_V2GRootCertificate InstallCertificateUseEnumType_1 = "V2GRootCertificate"

var enumValues_InstallCertificateUseEnumType = []interface{}{
	"V2GRootCertificate",
	"MORootCertificate",
	"CSMSRootCertificate",
	"ManufacturerRootCertificate",
}
var enumValues_InstallCertificateUseEnumType_1 = []interface{}{
	"V2GRootCertificate",
	"MORootCertificate",
	"CSMSRootCertificate",
	"ManufacturerRootCertificate",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *InstallCertificateRequestJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["certificate"]; !ok || v == nil {
		return fmt.Errorf("field certificate in InstallCertificateRequestJson: required")
	}
	if v, ok := raw["certificateType"]; !ok || v == nil {
		return fmt.Errorf("field certificateType in InstallCertificateRequestJson: required")
	}
	type Plain InstallCertificateRequestJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = InstallCertificateRequestJson(plain)
	return nil
}
