// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package SecurityEventNotificationRequest

import "fmt"
import "encoding/json"

// This class does not get 'AdditionalProperties = false' in the schema generation,
// so it can be extended with arbitrary JSON properties to allow adding custom
// data.
type CustomDataType struct {
	// VendorId corresponds to the JSON schema field "vendorId".
	VendorId string `json:"vendorId" yaml:"vendorId"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CustomDataType) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["vendorId"]; !ok || v == nil {
		return fmt.Errorf("field vendorId in CustomDataType: required")
	}
	type Plain CustomDataType
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CustomDataType(plain)
	return nil
}

type SecurityEventNotificationRequestJson struct {
	// CustomData corresponds to the JSON schema field "customData".
	CustomData *CustomDataType `json:"customData,omitempty" yaml:"customData,omitempty"`

	// Additional information about the occurred security event.
	//
	TechInfo *string `json:"techInfo,omitempty" yaml:"techInfo,omitempty"`

	// Date and time at which the event occurred.
	//
	Timestamp string `json:"timestamp" yaml:"timestamp"`

	// Type of the security event. This value should be taken from the Security events
	// list.
	//
	Type string `json:"type" yaml:"type"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SecurityEventNotificationRequestJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["timestamp"]; !ok || v == nil {
		return fmt.Errorf("field timestamp in SecurityEventNotificationRequestJson: required")
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type in SecurityEventNotificationRequestJson: required")
	}
	type Plain SecurityEventNotificationRequestJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SecurityEventNotificationRequestJson(plain)
	return nil
}
