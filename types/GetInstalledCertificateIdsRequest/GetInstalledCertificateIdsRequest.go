// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package GetInstalledCertificateIdsRequest

import "fmt"
import "encoding/json"
import "reflect"

// This class does not get 'AdditionalProperties = false' in the schema generation,
// so it can be extended with arbitrary JSON properties to allow adding custom
// data.
type CustomDataType struct {
	// VendorId corresponds to the JSON schema field "vendorId".
	VendorId string `json:"vendorId" yaml:"vendorId"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CustomDataType) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["vendorId"]; !ok || v == nil {
		return fmt.Errorf("field vendorId in CustomDataType: required")
	}
	type Plain CustomDataType
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CustomDataType(plain)
	return nil
}

type GetCertificateIdUseEnumType string

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetCertificateIdUseEnumType_1) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_GetCertificateIdUseEnumType_1 {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_GetCertificateIdUseEnumType_1, v)
	}
	*j = GetCertificateIdUseEnumType_1(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetCertificateIdUseEnumType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_GetCertificateIdUseEnumType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_GetCertificateIdUseEnumType, v)
	}
	*j = GetCertificateIdUseEnumType(v)
	return nil
}

const GetCertificateIdUseEnumTypeCSMSRootCertificate GetCertificateIdUseEnumType = "CSMSRootCertificate"
const GetCertificateIdUseEnumTypeMORootCertificate GetCertificateIdUseEnumType = "MORootCertificate"
const GetCertificateIdUseEnumTypeManufacturerRootCertificate GetCertificateIdUseEnumType = "ManufacturerRootCertificate"
const GetCertificateIdUseEnumTypeV2GCertificateChain GetCertificateIdUseEnumType = "V2GCertificateChain"
const GetCertificateIdUseEnumTypeV2GRootCertificate GetCertificateIdUseEnumType = "V2GRootCertificate"

type GetCertificateIdUseEnumType_1 string

const GetCertificateIdUseEnumType_1_CSMSRootCertificate GetCertificateIdUseEnumType_1 = "CSMSRootCertificate"
const GetCertificateIdUseEnumType_1_MORootCertificate GetCertificateIdUseEnumType_1 = "MORootCertificate"
const GetCertificateIdUseEnumType_1_ManufacturerRootCertificate GetCertificateIdUseEnumType_1 = "ManufacturerRootCertificate"
const GetCertificateIdUseEnumType_1_V2GCertificateChain GetCertificateIdUseEnumType_1 = "V2GCertificateChain"
const GetCertificateIdUseEnumType_1_V2GRootCertificate GetCertificateIdUseEnumType_1 = "V2GRootCertificate"

type GetInstalledCertificateIdsRequestJson struct {
	// Indicates the type of certificates requested. When omitted, all certificate
	// types are requested.
	//
	CertificateType []GetCertificateIdUseEnumType_1 `json:"certificateType,omitempty" yaml:"certificateType,omitempty"`

	// CustomData corresponds to the JSON schema field "customData".
	CustomData *CustomDataType `json:"customData,omitempty" yaml:"customData,omitempty"`
}

var enumValues_GetCertificateIdUseEnumType = []interface{}{
	"V2GRootCertificate",
	"MORootCertificate",
	"CSMSRootCertificate",
	"V2GCertificateChain",
	"ManufacturerRootCertificate",
}
var enumValues_GetCertificateIdUseEnumType_1 = []interface{}{
	"V2GRootCertificate",
	"MORootCertificate",
	"CSMSRootCertificate",
	"V2GCertificateChain",
	"ManufacturerRootCertificate",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetInstalledCertificateIdsRequestJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	type Plain GetInstalledCertificateIdsRequestJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if len(plain.CertificateType) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "certificateType", 1)
	}
	*j = GetInstalledCertificateIdsRequestJson(plain)
	return nil
}
