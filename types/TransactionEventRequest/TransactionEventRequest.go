// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package TransactionEventRequest

import "fmt"
import "encoding/json"
import "reflect"

// UnmarshalJSON implements json.Unmarshaler.
func (j *ReadingContextEnumType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ReadingContextEnumType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ReadingContextEnumType, v)
	}
	*j = ReadingContextEnumType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CustomDataType) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["vendorId"]; !ok || v == nil {
		return fmt.Errorf("field vendorId in CustomDataType: required")
	}
	type Plain CustomDataType
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CustomDataType(plain)
	return nil
}

// Contains a case insensitive identifier to use for the authorization and the type
// of authorization to support multiple forms of identifiers.
//
type AdditionalInfoType struct {
	// This field specifies the additional IdToken.
	//
	AdditionalIdToken string `json:"additionalIdToken" yaml:"additionalIdToken"`

	// CustomData corresponds to the JSON schema field "customData".
	CustomData *CustomDataType `json:"customData,omitempty" yaml:"customData,omitempty"`

	// This defines the type of the additionalIdToken. This is a custom type, so the
	// implementation needs to be agreed upon by all involved parties.
	//
	Type string `json:"type" yaml:"type"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AdditionalInfoType) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["additionalIdToken"]; !ok || v == nil {
		return fmt.Errorf("field additionalIdToken in AdditionalInfoType: required")
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type in AdditionalInfoType: required")
	}
	type Plain AdditionalInfoType
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = AdditionalInfoType(plain)
	return nil
}

type ChargingStateEnumType string

// UnmarshalJSON implements json.Unmarshaler.
func (j *TriggerReasonEnumType_1) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TriggerReasonEnumType_1 {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TriggerReasonEnumType_1, v)
	}
	*j = TriggerReasonEnumType_1(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ChargingStateEnumType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ChargingStateEnumType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ChargingStateEnumType, v)
	}
	*j = ChargingStateEnumType(v)
	return nil
}

const ChargingStateEnumTypeCharging ChargingStateEnumType = "Charging"
const ChargingStateEnumTypeEVConnected ChargingStateEnumType = "EVConnected"
const ChargingStateEnumTypeSuspendedEV ChargingStateEnumType = "SuspendedEV"
const ChargingStateEnumTypeSuspendedEVSE ChargingStateEnumType = "SuspendedEVSE"
const ChargingStateEnumTypeIdle ChargingStateEnumType = "Idle"

// EVSE
// urn:x-oca:ocpp:uid:2:233123
// Electric Vehicle Supply Equipment
//
type EVSEType struct {
	// An id to designate a specific connector (on an EVSE) by connector index number.
	//
	ConnectorId *int `json:"connectorId,omitempty" yaml:"connectorId,omitempty"`

	// CustomData corresponds to the JSON schema field "customData".
	CustomData *CustomDataType `json:"customData,omitempty" yaml:"customData,omitempty"`

	// Identified_ Object. MRID. Numeric_ Identifier
	// urn:x-enexis:ecdm:uid:1:569198
	// EVSE Identifier. This contains a number (&gt; 0) designating an EVSE of the
	// Charging Station.
	//
	Id int `json:"id" yaml:"id"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *EVSEType) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id in EVSEType: required")
	}
	type Plain EVSEType
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = EVSEType(plain)
	return nil
}

type IdTokenEnumType string

// UnmarshalJSON implements json.Unmarshaler.
func (j *TransactionEventEnumType_1) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TransactionEventEnumType_1 {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TransactionEventEnumType_1, v)
	}
	*j = TransactionEventEnumType_1(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *IdTokenEnumType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_IdTokenEnumType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_IdTokenEnumType, v)
	}
	*j = IdTokenEnumType(v)
	return nil
}

const IdTokenEnumTypeCentral IdTokenEnumType = "Central"
const IdTokenEnumTypeEMAID IdTokenEnumType = "eMAID"
const IdTokenEnumTypeISO14443 IdTokenEnumType = "ISO14443"
const IdTokenEnumTypeISO15693 IdTokenEnumType = "ISO15693"
const IdTokenEnumTypeKeyCode IdTokenEnumType = "KeyCode"
const IdTokenEnumTypeLocal IdTokenEnumType = "Local"
const IdTokenEnumTypeMacAddress IdTokenEnumType = "MacAddress"
const IdTokenEnumTypeNoAuthorization IdTokenEnumType = "NoAuthorization"

type IdTokenEnumType_1 string

// UnmarshalJSON implements json.Unmarshaler.
func (j *TriggerReasonEnumType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TriggerReasonEnumType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TriggerReasonEnumType, v)
	}
	*j = TriggerReasonEnumType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *IdTokenEnumType_1) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_IdTokenEnumType_1 {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_IdTokenEnumType_1, v)
	}
	*j = IdTokenEnumType_1(v)
	return nil
}

const IdTokenEnumType_1_Central IdTokenEnumType_1 = "Central"
const IdTokenEnumType_1_EMAID IdTokenEnumType_1 = "eMAID"
const IdTokenEnumType_1_ISO14443 IdTokenEnumType_1 = "ISO14443"
const IdTokenEnumType_1_ISO15693 IdTokenEnumType_1 = "ISO15693"
const IdTokenEnumType_1_KeyCode IdTokenEnumType_1 = "KeyCode"
const IdTokenEnumType_1_Local IdTokenEnumType_1 = "Local"
const IdTokenEnumType_1_MacAddress IdTokenEnumType_1 = "MacAddress"

// This class does not get 'AdditionalProperties = false' in the schema generation,
// so it can be extended with arbitrary JSON properties to allow adding custom
// data.
type CustomDataType struct {
	// VendorId corresponds to the JSON schema field "vendorId".
	VendorId string `json:"vendorId" yaml:"vendorId"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TransactionType) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["transactionId"]; !ok || v == nil {
		return fmt.Errorf("field transactionId in TransactionType: required")
	}
	type Plain TransactionType
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = TransactionType(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *IdTokenType) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["idToken"]; !ok || v == nil {
		return fmt.Errorf("field idToken in IdTokenType: required")
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type in IdTokenType: required")
	}
	type Plain IdTokenType
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if len(plain.AdditionalInfo) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "additionalInfo", 1)
	}
	*j = IdTokenType(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ReasonEnumType_1) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ReasonEnumType_1 {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ReasonEnumType_1, v)
	}
	*j = ReasonEnumType_1(v)
	return nil
}

const ChargingStateEnumType_1_Idle ChargingStateEnumType_1 = "Idle"

// UnmarshalJSON implements json.Unmarshaler.
func (j *LocationEnumType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LocationEnumType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LocationEnumType, v)
	}
	*j = LocationEnumType(v)
	return nil
}

const ChargingStateEnumType_1_SuspendedEVSE ChargingStateEnumType_1 = "SuspendedEVSE"
const ChargingStateEnumType_1_SuspendedEV ChargingStateEnumType_1 = "SuspendedEV"
const ChargingStateEnumType_1_EVConnected ChargingStateEnumType_1 = "EVConnected"
const ChargingStateEnumType_1_Charging ChargingStateEnumType_1 = "Charging"

// UnmarshalJSON implements json.Unmarshaler.
func (j *ChargingStateEnumType_1) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ChargingStateEnumType_1 {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ChargingStateEnumType_1, v)
	}
	*j = ChargingStateEnumType_1(v)
	return nil
}

type ChargingStateEnumType_1 string

// UnmarshalJSON implements json.Unmarshaler.
func (j *TransactionEventEnumType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TransactionEventEnumType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TransactionEventEnumType, v)
	}
	*j = TransactionEventEnumType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MeasurandEnumType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_MeasurandEnumType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_MeasurandEnumType, v)
	}
	*j = MeasurandEnumType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ReasonEnumType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ReasonEnumType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ReasonEnumType, v)
	}
	*j = ReasonEnumType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ReadingContextEnumType_1) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ReadingContextEnumType_1 {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ReadingContextEnumType_1, v)
	}
	*j = ReadingContextEnumType_1(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PhaseEnumType_1) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PhaseEnumType_1 {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PhaseEnumType_1, v)
	}
	*j = PhaseEnumType_1(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MeterValueType) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["sampledValue"]; !ok || v == nil {
		return fmt.Errorf("field sampledValue in MeterValueType: required")
	}
	if v, ok := raw["timestamp"]; !ok || v == nil {
		return fmt.Errorf("field timestamp in MeterValueType: required")
	}
	type Plain MeterValueType
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if len(plain.SampledValue) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "sampledValue", 1)
	}
	*j = MeterValueType(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SampledValueType) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["value"]; !ok || v == nil {
		return fmt.Errorf("field value in SampledValueType: required")
	}
	type Plain SampledValueType
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SampledValueType(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *UnitOfMeasureType) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	type Plain UnitOfMeasureType
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["multiplier"]; !ok || v == nil {
		plain.Multiplier = 0
	}
	if v, ok := raw["unit"]; !ok || v == nil {
		plain.Unit = "Wh"
	}
	*j = UnitOfMeasureType(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SignedMeterValueType) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["encodingMethod"]; !ok || v == nil {
		return fmt.Errorf("field encodingMethod in SignedMeterValueType: required")
	}
	if v, ok := raw["publicKey"]; !ok || v == nil {
		return fmt.Errorf("field publicKey in SignedMeterValueType: required")
	}
	if v, ok := raw["signedMeterData"]; !ok || v == nil {
		return fmt.Errorf("field signedMeterData in SignedMeterValueType: required")
	}
	if v, ok := raw["signingMethod"]; !ok || v == nil {
		return fmt.Errorf("field signingMethod in SignedMeterValueType: required")
	}
	type Plain SignedMeterValueType
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SignedMeterValueType(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PhaseEnumType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PhaseEnumType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PhaseEnumType, v)
	}
	*j = PhaseEnumType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MeasurandEnumType_1) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_MeasurandEnumType_1 {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_MeasurandEnumType_1, v)
	}
	*j = MeasurandEnumType_1(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LocationEnumType_1) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LocationEnumType_1 {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LocationEnumType_1, v)
	}
	*j = LocationEnumType_1(v)
	return nil
}

const IdTokenEnumType_1_NoAuthorization IdTokenEnumType_1 = "NoAuthorization"

// Contains a case insensitive identifier to use for the authorization and the type
// of authorization to support multiple forms of identifiers.
//
type IdTokenType struct {
	// AdditionalInfo corresponds to the JSON schema field "additionalInfo".
	AdditionalInfo []AdditionalInfoType `json:"additionalInfo,omitempty" yaml:"additionalInfo,omitempty"`

	// CustomData corresponds to the JSON schema field "customData".
	CustomData *CustomDataType `json:"customData,omitempty" yaml:"customData,omitempty"`

	// IdToken is case insensitive. Might hold the hidden id of an RFID tag, but can
	// for example also contain a UUID.
	//
	IdToken string `json:"idToken" yaml:"idToken"`

	// Type corresponds to the JSON schema field "type".
	Type IdTokenEnumType_1 `json:"type" yaml:"type"`
}

type LocationEnumType string

const LocationEnumTypeBody LocationEnumType = "Body"
const LocationEnumTypeCable LocationEnumType = "Cable"
const LocationEnumTypeEV LocationEnumType = "EV"
const LocationEnumTypeInlet LocationEnumType = "Inlet"
const LocationEnumTypeOutlet LocationEnumType = "Outlet"

type LocationEnumType_1 string

const LocationEnumType_1_Body LocationEnumType_1 = "Body"
const LocationEnumType_1_Cable LocationEnumType_1 = "Cable"
const LocationEnumType_1_EV LocationEnumType_1 = "EV"
const LocationEnumType_1_Inlet LocationEnumType_1 = "Inlet"
const LocationEnumType_1_Outlet LocationEnumType_1 = "Outlet"

type MeasurandEnumType string

const MeasurandEnumTypeCurrentExport MeasurandEnumType = "Current.Export"
const MeasurandEnumTypeCurrentImport MeasurandEnumType = "Current.Import"
const MeasurandEnumTypeCurrentOffered MeasurandEnumType = "Current.Offered"
const MeasurandEnumTypeEnergyActiveExportInterval MeasurandEnumType = "Energy.Active.Export.Interval"
const MeasurandEnumTypeEnergyActiveExportRegister MeasurandEnumType = "Energy.Active.Export.Register"
const MeasurandEnumTypeEnergyActiveImportInterval MeasurandEnumType = "Energy.Active.Import.Interval"
const MeasurandEnumTypeEnergyActiveImportRegister MeasurandEnumType = "Energy.Active.Import.Register"
const MeasurandEnumTypeEnergyActiveNet MeasurandEnumType = "Energy.Active.Net"
const MeasurandEnumTypeEnergyApparentExport MeasurandEnumType = "Energy.Apparent.Export"
const MeasurandEnumTypeEnergyApparentImport MeasurandEnumType = "Energy.Apparent.Import"
const MeasurandEnumTypeEnergyApparentNet MeasurandEnumType = "Energy.Apparent.Net"
const MeasurandEnumTypeEnergyReactiveExportInterval MeasurandEnumType = "Energy.Reactive.Export.Interval"
const MeasurandEnumTypeEnergyReactiveExportRegister MeasurandEnumType = "Energy.Reactive.Export.Register"
const MeasurandEnumTypeEnergyReactiveImportInterval MeasurandEnumType = "Energy.Reactive.Import.Interval"
const MeasurandEnumTypeEnergyReactiveImportRegister MeasurandEnumType = "Energy.Reactive.Import.Register"
const MeasurandEnumTypeEnergyReactiveNet MeasurandEnumType = "Energy.Reactive.Net"
const MeasurandEnumTypeFrequency MeasurandEnumType = "Frequency"
const MeasurandEnumTypePowerActiveExport MeasurandEnumType = "Power.Active.Export"
const MeasurandEnumTypePowerActiveImport MeasurandEnumType = "Power.Active.Import"
const MeasurandEnumTypePowerFactor MeasurandEnumType = "Power.Factor"
const MeasurandEnumTypePowerOffered MeasurandEnumType = "Power.Offered"
const MeasurandEnumTypePowerReactiveExport MeasurandEnumType = "Power.Reactive.Export"
const MeasurandEnumTypePowerReactiveImport MeasurandEnumType = "Power.Reactive.Import"
const MeasurandEnumTypeSoC MeasurandEnumType = "SoC"
const MeasurandEnumTypeVoltage MeasurandEnumType = "Voltage"

type MeasurandEnumType_1 string

const MeasurandEnumType_1_CurrentExport MeasurandEnumType_1 = "Current.Export"
const MeasurandEnumType_1_CurrentImport MeasurandEnumType_1 = "Current.Import"
const MeasurandEnumType_1_CurrentOffered MeasurandEnumType_1 = "Current.Offered"
const MeasurandEnumType_1_EnergyActiveExportInterval MeasurandEnumType_1 = "Energy.Active.Export.Interval"
const MeasurandEnumType_1_EnergyActiveExportRegister MeasurandEnumType_1 = "Energy.Active.Export.Register"
const MeasurandEnumType_1_EnergyActiveImportInterval MeasurandEnumType_1 = "Energy.Active.Import.Interval"
const MeasurandEnumType_1_EnergyActiveImportRegister MeasurandEnumType_1 = "Energy.Active.Import.Register"
const MeasurandEnumType_1_EnergyActiveNet MeasurandEnumType_1 = "Energy.Active.Net"
const MeasurandEnumType_1_EnergyApparentExport MeasurandEnumType_1 = "Energy.Apparent.Export"
const MeasurandEnumType_1_EnergyApparentImport MeasurandEnumType_1 = "Energy.Apparent.Import"
const MeasurandEnumType_1_EnergyApparentNet MeasurandEnumType_1 = "Energy.Apparent.Net"
const MeasurandEnumType_1_EnergyReactiveExportInterval MeasurandEnumType_1 = "Energy.Reactive.Export.Interval"
const MeasurandEnumType_1_EnergyReactiveExportRegister MeasurandEnumType_1 = "Energy.Reactive.Export.Register"
const MeasurandEnumType_1_EnergyReactiveImportInterval MeasurandEnumType_1 = "Energy.Reactive.Import.Interval"
const MeasurandEnumType_1_EnergyReactiveImportRegister MeasurandEnumType_1 = "Energy.Reactive.Import.Register"
const MeasurandEnumType_1_EnergyReactiveNet MeasurandEnumType_1 = "Energy.Reactive.Net"
const MeasurandEnumType_1_Frequency MeasurandEnumType_1 = "Frequency"
const MeasurandEnumType_1_PowerActiveExport MeasurandEnumType_1 = "Power.Active.Export"
const MeasurandEnumType_1_PowerActiveImport MeasurandEnumType_1 = "Power.Active.Import"
const MeasurandEnumType_1_PowerFactor MeasurandEnumType_1 = "Power.Factor"
const MeasurandEnumType_1_PowerOffered MeasurandEnumType_1 = "Power.Offered"
const MeasurandEnumType_1_PowerReactiveExport MeasurandEnumType_1 = "Power.Reactive.Export"
const MeasurandEnumType_1_PowerReactiveImport MeasurandEnumType_1 = "Power.Reactive.Import"
const MeasurandEnumType_1_SoC MeasurandEnumType_1 = "SoC"
const MeasurandEnumType_1_Voltage MeasurandEnumType_1 = "Voltage"

// Meter_ Value
// urn:x-oca:ocpp:uid:2:233265
// Collection of one or more sampled values in MeterValuesRequest and
// TransactionEvent. All sampled values in a MeterValue are sampled at the same
// point in time.
//
type MeterValueType struct {
	// CustomData corresponds to the JSON schema field "customData".
	CustomData *CustomDataType `json:"customData,omitempty" yaml:"customData,omitempty"`

	// SampledValue corresponds to the JSON schema field "sampledValue".
	SampledValue []SampledValueType `json:"sampledValue" yaml:"sampledValue"`

	// Meter_ Value. Timestamp. Date_ Time
	// urn:x-oca:ocpp:uid:1:569259
	// Timestamp for measured value(s).
	//
	Timestamp string `json:"timestamp" yaml:"timestamp"`
}

type PhaseEnumType string

const PhaseEnumTypeL1 PhaseEnumType = "L1"
const PhaseEnumTypeL1L2 PhaseEnumType = "L1-L2"
const PhaseEnumTypeL1N PhaseEnumType = "L1-N"
const PhaseEnumTypeL2 PhaseEnumType = "L2"
const PhaseEnumTypeL2L3 PhaseEnumType = "L2-L3"
const PhaseEnumTypeL2N PhaseEnumType = "L2-N"
const PhaseEnumTypeL3 PhaseEnumType = "L3"
const PhaseEnumTypeL3L1 PhaseEnumType = "L3-L1"
const PhaseEnumTypeL3N PhaseEnumType = "L3-N"
const PhaseEnumTypeN PhaseEnumType = "N"

type PhaseEnumType_1 string

const PhaseEnumType_1_L1 PhaseEnumType_1 = "L1"
const PhaseEnumType_1_L1L2 PhaseEnumType_1 = "L1-L2"
const PhaseEnumType_1_L1N PhaseEnumType_1 = "L1-N"
const PhaseEnumType_1_L2 PhaseEnumType_1 = "L2"
const PhaseEnumType_1_L2L3 PhaseEnumType_1 = "L2-L3"
const PhaseEnumType_1_L2N PhaseEnumType_1 = "L2-N"
const PhaseEnumType_1_L3 PhaseEnumType_1 = "L3"
const PhaseEnumType_1_L3L1 PhaseEnumType_1 = "L3-L1"
const PhaseEnumType_1_L3N PhaseEnumType_1 = "L3-N"
const PhaseEnumType_1_N PhaseEnumType_1 = "N"

type ReadingContextEnumType string

const ReadingContextEnumTypeInterruptionBegin ReadingContextEnumType = "Interruption.Begin"
const ReadingContextEnumTypeInterruptionEnd ReadingContextEnumType = "Interruption.End"
const ReadingContextEnumTypeOther ReadingContextEnumType = "Other"
const ReadingContextEnumTypeSampleClock ReadingContextEnumType = "Sample.Clock"
const ReadingContextEnumTypeSamplePeriodic ReadingContextEnumType = "Sample.Periodic"
const ReadingContextEnumTypeTransactionBegin ReadingContextEnumType = "Transaction.Begin"
const ReadingContextEnumTypeTransactionEnd ReadingContextEnumType = "Transaction.End"
const ReadingContextEnumTypeTrigger ReadingContextEnumType = "Trigger"

type ReadingContextEnumType_1 string

const ReadingContextEnumType_1_InterruptionBegin ReadingContextEnumType_1 = "Interruption.Begin"
const ReadingContextEnumType_1_InterruptionEnd ReadingContextEnumType_1 = "Interruption.End"
const ReadingContextEnumType_1_Other ReadingContextEnumType_1 = "Other"
const ReadingContextEnumType_1_SampleClock ReadingContextEnumType_1 = "Sample.Clock"
const ReadingContextEnumType_1_SamplePeriodic ReadingContextEnumType_1 = "Sample.Periodic"
const ReadingContextEnumType_1_TransactionBegin ReadingContextEnumType_1 = "Transaction.Begin"
const ReadingContextEnumType_1_TransactionEnd ReadingContextEnumType_1 = "Transaction.End"
const ReadingContextEnumType_1_Trigger ReadingContextEnumType_1 = "Trigger"

type ReasonEnumType string

const ReasonEnumTypeDeAuthorized ReasonEnumType = "DeAuthorized"
const ReasonEnumTypeEVDisconnected ReasonEnumType = "EVDisconnected"
const ReasonEnumTypeEmergencyStop ReasonEnumType = "EmergencyStop"
const ReasonEnumTypeEnergyLimitReached ReasonEnumType = "EnergyLimitReached"
const ReasonEnumTypeGroundFault ReasonEnumType = "GroundFault"
const ReasonEnumTypeImmediateReset ReasonEnumType = "ImmediateReset"
const ReasonEnumTypeLocal ReasonEnumType = "Local"
const ReasonEnumTypeLocalOutOfCredit ReasonEnumType = "LocalOutOfCredit"
const ReasonEnumTypeMasterPass ReasonEnumType = "MasterPass"
const ReasonEnumTypeOther ReasonEnumType = "Other"
const ReasonEnumTypeOvercurrentFault ReasonEnumType = "OvercurrentFault"
const ReasonEnumTypePowerLoss ReasonEnumType = "PowerLoss"
const ReasonEnumTypePowerQuality ReasonEnumType = "PowerQuality"
const ReasonEnumTypeReboot ReasonEnumType = "Reboot"
const ReasonEnumTypeRemote ReasonEnumType = "Remote"
const ReasonEnumTypeSOCLimitReached ReasonEnumType = "SOCLimitReached"
const ReasonEnumTypeStoppedByEV ReasonEnumType = "StoppedByEV"
const ReasonEnumTypeTimeLimitReached ReasonEnumType = "TimeLimitReached"
const ReasonEnumTypeTimeout ReasonEnumType = "Timeout"

type ReasonEnumType_1 string

const ReasonEnumType_1_DeAuthorized ReasonEnumType_1 = "DeAuthorized"
const ReasonEnumType_1_EVDisconnected ReasonEnumType_1 = "EVDisconnected"
const ReasonEnumType_1_EmergencyStop ReasonEnumType_1 = "EmergencyStop"
const ReasonEnumType_1_EnergyLimitReached ReasonEnumType_1 = "EnergyLimitReached"
const ReasonEnumType_1_GroundFault ReasonEnumType_1 = "GroundFault"
const ReasonEnumType_1_ImmediateReset ReasonEnumType_1 = "ImmediateReset"
const ReasonEnumType_1_Local ReasonEnumType_1 = "Local"
const ReasonEnumType_1_LocalOutOfCredit ReasonEnumType_1 = "LocalOutOfCredit"
const ReasonEnumType_1_MasterPass ReasonEnumType_1 = "MasterPass"
const ReasonEnumType_1_Other ReasonEnumType_1 = "Other"
const ReasonEnumType_1_OvercurrentFault ReasonEnumType_1 = "OvercurrentFault"
const ReasonEnumType_1_PowerLoss ReasonEnumType_1 = "PowerLoss"
const ReasonEnumType_1_PowerQuality ReasonEnumType_1 = "PowerQuality"
const ReasonEnumType_1_Reboot ReasonEnumType_1 = "Reboot"
const ReasonEnumType_1_Remote ReasonEnumType_1 = "Remote"
const ReasonEnumType_1_SOCLimitReached ReasonEnumType_1 = "SOCLimitReached"
const ReasonEnumType_1_StoppedByEV ReasonEnumType_1 = "StoppedByEV"
const ReasonEnumType_1_TimeLimitReached ReasonEnumType_1 = "TimeLimitReached"
const ReasonEnumType_1_Timeout ReasonEnumType_1 = "Timeout"

// Sampled_ Value
// urn:x-oca:ocpp:uid:2:233266
// Single sampled value in MeterValues. Each value can be accompanied by optional
// fields.
//
// To save on mobile data usage, default values of all of the optional fields are
// such that. The value without any additional fields will be interpreted, as a
// register reading of active import energy in Wh (Watt-hour) units.
//
type SampledValueType struct {
	// Context corresponds to the JSON schema field "context".
	Context *ReadingContextEnumType `json:"context,omitempty" yaml:"context,omitempty"`

	// CustomData corresponds to the JSON schema field "customData".
	CustomData *CustomDataType `json:"customData,omitempty" yaml:"customData,omitempty"`

	// Location corresponds to the JSON schema field "location".
	Location *LocationEnumType_1 `json:"location,omitempty" yaml:"location,omitempty"`

	// Measurand corresponds to the JSON schema field "measurand".
	Measurand *MeasurandEnumType_1 `json:"measurand,omitempty" yaml:"measurand,omitempty"`

	// Phase corresponds to the JSON schema field "phase".
	Phase *PhaseEnumType `json:"phase,omitempty" yaml:"phase,omitempty"`

	// SignedMeterValue corresponds to the JSON schema field "signedMeterValue".
	SignedMeterValue *SignedMeterValueType `json:"signedMeterValue,omitempty" yaml:"signedMeterValue,omitempty"`

	// UnitOfMeasure corresponds to the JSON schema field "unitOfMeasure".
	UnitOfMeasure *UnitOfMeasureType `json:"unitOfMeasure,omitempty" yaml:"unitOfMeasure,omitempty"`

	// Sampled_ Value. Value. Measure
	// urn:x-oca:ocpp:uid:1:569260
	// Indicates the measured value.
	//
	//
	Value float64 `json:"value" yaml:"value"`
}

// Represent a signed version of the meter value.
//
type SignedMeterValueType struct {
	// CustomData corresponds to the JSON schema field "customData".
	CustomData *CustomDataType `json:"customData,omitempty" yaml:"customData,omitempty"`

	// Method used to encode the meter values before applying the digital signature
	// algorithm.
	//
	EncodingMethod string `json:"encodingMethod" yaml:"encodingMethod"`

	// Base64 encoded, sending depends on configuration variable
	// _PublicKeyWithSignedMeterValue_.
	//
	PublicKey string `json:"publicKey" yaml:"publicKey"`

	// Base64 encoded, contains the signed data which might contain more then just the
	// meter value. It can contain information like timestamps, reference to a
	// customer etc.
	//
	SignedMeterData string `json:"signedMeterData" yaml:"signedMeterData"`

	// Method used to create the digital signature.
	//
	SigningMethod string `json:"signingMethod" yaml:"signingMethod"`
}

type TransactionEventEnumType string

const TransactionEventEnumTypeEnded TransactionEventEnumType = "Ended"
const TransactionEventEnumTypeStarted TransactionEventEnumType = "Started"
const TransactionEventEnumTypeUpdated TransactionEventEnumType = "Updated"

type TransactionEventEnumType_1 string

const TransactionEventEnumType_1_Ended TransactionEventEnumType_1 = "Ended"
const TransactionEventEnumType_1_Started TransactionEventEnumType_1 = "Started"
const TransactionEventEnumType_1_Updated TransactionEventEnumType_1 = "Updated"

type TransactionEventRequestJson struct {
	// The maximum current of the connected cable in Ampere (A).
	//
	CableMaxCurrent *int `json:"cableMaxCurrent,omitempty" yaml:"cableMaxCurrent,omitempty"`

	// CustomData corresponds to the JSON schema field "customData".
	CustomData *CustomDataType `json:"customData,omitempty" yaml:"customData,omitempty"`

	// EventType corresponds to the JSON schema field "eventType".
	EventType TransactionEventEnumType_1 `json:"eventType" yaml:"eventType"`

	// Evse corresponds to the JSON schema field "evse".
	Evse *EVSEType `json:"evse,omitempty" yaml:"evse,omitempty"`

	// IdToken corresponds to the JSON schema field "idToken".
	IdToken *IdTokenType `json:"idToken,omitempty" yaml:"idToken,omitempty"`

	// MeterValue corresponds to the JSON schema field "meterValue".
	MeterValue []MeterValueType `json:"meterValue,omitempty" yaml:"meterValue,omitempty"`

	// If the Charging Station is able to report the number of phases used, then it
	// SHALL provide it. When omitted the CSMS may be able to determine the number of
	// phases used via device management.
	//
	NumberOfPhasesUsed *int `json:"numberOfPhasesUsed,omitempty" yaml:"numberOfPhasesUsed,omitempty"`

	// Indication that this transaction event happened when the Charging Station was
	// offline. Default = false, meaning: the event occurred when the Charging Station
	// was online.
	//
	Offline bool `json:"offline,omitempty" yaml:"offline,omitempty"`

	// This contains the Id of the reservation that terminates as a result of this
	// transaction.
	//
	ReservationId *int `json:"reservationId,omitempty" yaml:"reservationId,omitempty"`

	// Incremental sequence number, helps with determining if all messages of a
	// transaction have been received.
	//
	SeqNo int `json:"seqNo" yaml:"seqNo"`

	// The date and time at which this transaction event occurred.
	//
	Timestamp string `json:"timestamp" yaml:"timestamp"`

	// TransactionInfo corresponds to the JSON schema field "transactionInfo".
	TransactionInfo TransactionType `json:"transactionInfo" yaml:"transactionInfo"`

	// TriggerReason corresponds to the JSON schema field "triggerReason".
	TriggerReason TriggerReasonEnumType_1 `json:"triggerReason" yaml:"triggerReason"`
}

// Transaction
// urn:x-oca:ocpp:uid:2:233318
//
type TransactionType struct {
	// ChargingState corresponds to the JSON schema field "chargingState".
	ChargingState *ChargingStateEnumType_1 `json:"chargingState,omitempty" yaml:"chargingState,omitempty"`

	// CustomData corresponds to the JSON schema field "customData".
	CustomData *CustomDataType `json:"customData,omitempty" yaml:"customData,omitempty"`

	// The ID given to remote start request (&lt;&lt;requeststarttransactionrequest,
	// RequestStartTransactionRequest&gt;&gt;. This enables to CSMS to match the
	// started transaction to the given start request.
	//
	RemoteStartId *int `json:"remoteStartId,omitempty" yaml:"remoteStartId,omitempty"`

	// StoppedReason corresponds to the JSON schema field "stoppedReason".
	StoppedReason *ReasonEnumType_1 `json:"stoppedReason,omitempty" yaml:"stoppedReason,omitempty"`

	// Transaction. Time_ Spent_ Charging. Elapsed_ Time
	// urn:x-oca:ocpp:uid:1:569415
	// Contains the total time that energy flowed from EVSE to EV during the
	// transaction (in seconds). Note that timeSpentCharging is smaller or equal to
	// the duration of the transaction.
	//
	TimeSpentCharging *int `json:"timeSpentCharging,omitempty" yaml:"timeSpentCharging,omitempty"`

	// This contains the Id of the transaction.
	//
	TransactionId string `json:"transactionId" yaml:"transactionId"`
}

type TriggerReasonEnumType string

const TriggerReasonEnumTypeAbnormalCondition TriggerReasonEnumType = "AbnormalCondition"
const TriggerReasonEnumTypeAuthorized TriggerReasonEnumType = "Authorized"
const TriggerReasonEnumTypeCablePluggedIn TriggerReasonEnumType = "CablePluggedIn"
const TriggerReasonEnumTypeChargingRateChanged TriggerReasonEnumType = "ChargingRateChanged"
const TriggerReasonEnumTypeChargingStateChanged TriggerReasonEnumType = "ChargingStateChanged"
const TriggerReasonEnumTypeDeauthorized TriggerReasonEnumType = "Deauthorized"
const TriggerReasonEnumTypeEVCommunicationLost TriggerReasonEnumType = "EVCommunicationLost"
const TriggerReasonEnumTypeEVConnectTimeout TriggerReasonEnumType = "EVConnectTimeout"
const TriggerReasonEnumTypeEVDeparted TriggerReasonEnumType = "EVDeparted"
const TriggerReasonEnumTypeEVDetected TriggerReasonEnumType = "EVDetected"
const TriggerReasonEnumTypeEnergyLimitReached TriggerReasonEnumType = "EnergyLimitReached"
const TriggerReasonEnumTypeMeterValueClock TriggerReasonEnumType = "MeterValueClock"
const TriggerReasonEnumTypeMeterValuePeriodic TriggerReasonEnumType = "MeterValuePeriodic"
const TriggerReasonEnumTypeRemoteStart TriggerReasonEnumType = "RemoteStart"
const TriggerReasonEnumTypeRemoteStop TriggerReasonEnumType = "RemoteStop"
const TriggerReasonEnumTypeResetCommand TriggerReasonEnumType = "ResetCommand"
const TriggerReasonEnumTypeSignedDataReceived TriggerReasonEnumType = "SignedDataReceived"
const TriggerReasonEnumTypeStopAuthorized TriggerReasonEnumType = "StopAuthorized"
const TriggerReasonEnumTypeTimeLimitReached TriggerReasonEnumType = "TimeLimitReached"
const TriggerReasonEnumTypeTrigger TriggerReasonEnumType = "Trigger"
const TriggerReasonEnumTypeUnlockCommand TriggerReasonEnumType = "UnlockCommand"

type TriggerReasonEnumType_1 string

const TriggerReasonEnumType_1_AbnormalCondition TriggerReasonEnumType_1 = "AbnormalCondition"
const TriggerReasonEnumType_1_Authorized TriggerReasonEnumType_1 = "Authorized"
const TriggerReasonEnumType_1_CablePluggedIn TriggerReasonEnumType_1 = "CablePluggedIn"
const TriggerReasonEnumType_1_ChargingRateChanged TriggerReasonEnumType_1 = "ChargingRateChanged"
const TriggerReasonEnumType_1_ChargingStateChanged TriggerReasonEnumType_1 = "ChargingStateChanged"
const TriggerReasonEnumType_1_Deauthorized TriggerReasonEnumType_1 = "Deauthorized"
const TriggerReasonEnumType_1_EVCommunicationLost TriggerReasonEnumType_1 = "EVCommunicationLost"
const TriggerReasonEnumType_1_EVConnectTimeout TriggerReasonEnumType_1 = "EVConnectTimeout"
const TriggerReasonEnumType_1_EVDeparted TriggerReasonEnumType_1 = "EVDeparted"
const TriggerReasonEnumType_1_EVDetected TriggerReasonEnumType_1 = "EVDetected"
const TriggerReasonEnumType_1_EnergyLimitReached TriggerReasonEnumType_1 = "EnergyLimitReached"
const TriggerReasonEnumType_1_MeterValueClock TriggerReasonEnumType_1 = "MeterValueClock"
const TriggerReasonEnumType_1_MeterValuePeriodic TriggerReasonEnumType_1 = "MeterValuePeriodic"
const TriggerReasonEnumType_1_RemoteStart TriggerReasonEnumType_1 = "RemoteStart"
const TriggerReasonEnumType_1_RemoteStop TriggerReasonEnumType_1 = "RemoteStop"
const TriggerReasonEnumType_1_ResetCommand TriggerReasonEnumType_1 = "ResetCommand"
const TriggerReasonEnumType_1_SignedDataReceived TriggerReasonEnumType_1 = "SignedDataReceived"
const TriggerReasonEnumType_1_StopAuthorized TriggerReasonEnumType_1 = "StopAuthorized"
const TriggerReasonEnumType_1_TimeLimitReached TriggerReasonEnumType_1 = "TimeLimitReached"
const TriggerReasonEnumType_1_Trigger TriggerReasonEnumType_1 = "Trigger"
const TriggerReasonEnumType_1_UnlockCommand TriggerReasonEnumType_1 = "UnlockCommand"

// Represents a UnitOfMeasure with a multiplier
//
type UnitOfMeasureType struct {
	// CustomData corresponds to the JSON schema field "customData".
	CustomData *CustomDataType `json:"customData,omitempty" yaml:"customData,omitempty"`

	// Multiplier, this value represents the exponent to base 10. I.e. multiplier 3
	// means 10 raised to the 3rd power. Default is 0.
	//
	Multiplier int `json:"multiplier,omitempty" yaml:"multiplier,omitempty"`

	// Unit of the value. Default = "Wh" if the (default) measurand is an "Energy"
	// type.
	// This field SHALL use a value from the list Standardized Units of Measurements
	// in Part 2 Appendices.
	// If an applicable unit is available in that list, otherwise a "custom" unit
	// might be used.
	//
	Unit string `json:"unit,omitempty" yaml:"unit,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TransactionEventRequestJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["eventType"]; !ok || v == nil {
		return fmt.Errorf("field eventType in TransactionEventRequestJson: required")
	}
	if v, ok := raw["seqNo"]; !ok || v == nil {
		return fmt.Errorf("field seqNo in TransactionEventRequestJson: required")
	}
	if v, ok := raw["timestamp"]; !ok || v == nil {
		return fmt.Errorf("field timestamp in TransactionEventRequestJson: required")
	}
	if v, ok := raw["transactionInfo"]; !ok || v == nil {
		return fmt.Errorf("field transactionInfo in TransactionEventRequestJson: required")
	}
	if v, ok := raw["triggerReason"]; !ok || v == nil {
		return fmt.Errorf("field triggerReason in TransactionEventRequestJson: required")
	}
	type Plain TransactionEventRequestJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if len(plain.MeterValue) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "meterValue", 1)
	}
	if v, ok := raw["offline"]; !ok || v == nil {
		plain.Offline = false
	}
	*j = TransactionEventRequestJson(plain)
	return nil
}

var enumValues_ChargingStateEnumType = []interface{}{
	"Charging",
	"EVConnected",
	"SuspendedEV",
	"SuspendedEVSE",
	"Idle",
}
var enumValues_ChargingStateEnumType_1 = []interface{}{
	"Charging",
	"EVConnected",
	"SuspendedEV",
	"SuspendedEVSE",
	"Idle",
}
var enumValues_IdTokenEnumType = []interface{}{
	"Central",
	"eMAID",
	"ISO14443",
	"ISO15693",
	"KeyCode",
	"Local",
	"MacAddress",
	"NoAuthorization",
}
var enumValues_IdTokenEnumType_1 = []interface{}{
	"Central",
	"eMAID",
	"ISO14443",
	"ISO15693",
	"KeyCode",
	"Local",
	"MacAddress",
	"NoAuthorization",
}
var enumValues_LocationEnumType = []interface{}{
	"Body",
	"Cable",
	"EV",
	"Inlet",
	"Outlet",
}
var enumValues_LocationEnumType_1 = []interface{}{
	"Body",
	"Cable",
	"EV",
	"Inlet",
	"Outlet",
}
var enumValues_MeasurandEnumType = []interface{}{
	"Current.Export",
	"Current.Import",
	"Current.Offered",
	"Energy.Active.Export.Register",
	"Energy.Active.Import.Register",
	"Energy.Reactive.Export.Register",
	"Energy.Reactive.Import.Register",
	"Energy.Active.Export.Interval",
	"Energy.Active.Import.Interval",
	"Energy.Active.Net",
	"Energy.Reactive.Export.Interval",
	"Energy.Reactive.Import.Interval",
	"Energy.Reactive.Net",
	"Energy.Apparent.Net",
	"Energy.Apparent.Import",
	"Energy.Apparent.Export",
	"Frequency",
	"Power.Active.Export",
	"Power.Active.Import",
	"Power.Factor",
	"Power.Offered",
	"Power.Reactive.Export",
	"Power.Reactive.Import",
	"SoC",
	"Voltage",
}
var enumValues_MeasurandEnumType_1 = []interface{}{
	"Current.Export",
	"Current.Import",
	"Current.Offered",
	"Energy.Active.Export.Register",
	"Energy.Active.Import.Register",
	"Energy.Reactive.Export.Register",
	"Energy.Reactive.Import.Register",
	"Energy.Active.Export.Interval",
	"Energy.Active.Import.Interval",
	"Energy.Active.Net",
	"Energy.Reactive.Export.Interval",
	"Energy.Reactive.Import.Interval",
	"Energy.Reactive.Net",
	"Energy.Apparent.Net",
	"Energy.Apparent.Import",
	"Energy.Apparent.Export",
	"Frequency",
	"Power.Active.Export",
	"Power.Active.Import",
	"Power.Factor",
	"Power.Offered",
	"Power.Reactive.Export",
	"Power.Reactive.Import",
	"SoC",
	"Voltage",
}
var enumValues_PhaseEnumType = []interface{}{
	"L1",
	"L2",
	"L3",
	"N",
	"L1-N",
	"L2-N",
	"L3-N",
	"L1-L2",
	"L2-L3",
	"L3-L1",
}
var enumValues_PhaseEnumType_1 = []interface{}{
	"L1",
	"L2",
	"L3",
	"N",
	"L1-N",
	"L2-N",
	"L3-N",
	"L1-L2",
	"L2-L3",
	"L3-L1",
}
var enumValues_ReadingContextEnumType = []interface{}{
	"Interruption.Begin",
	"Interruption.End",
	"Other",
	"Sample.Clock",
	"Sample.Periodic",
	"Transaction.Begin",
	"Transaction.End",
	"Trigger",
}
var enumValues_ReadingContextEnumType_1 = []interface{}{
	"Interruption.Begin",
	"Interruption.End",
	"Other",
	"Sample.Clock",
	"Sample.Periodic",
	"Transaction.Begin",
	"Transaction.End",
	"Trigger",
}
var enumValues_ReasonEnumType = []interface{}{
	"DeAuthorized",
	"EmergencyStop",
	"EnergyLimitReached",
	"EVDisconnected",
	"GroundFault",
	"ImmediateReset",
	"Local",
	"LocalOutOfCredit",
	"MasterPass",
	"Other",
	"OvercurrentFault",
	"PowerLoss",
	"PowerQuality",
	"Reboot",
	"Remote",
	"SOCLimitReached",
	"StoppedByEV",
	"TimeLimitReached",
	"Timeout",
}
var enumValues_ReasonEnumType_1 = []interface{}{
	"DeAuthorized",
	"EmergencyStop",
	"EnergyLimitReached",
	"EVDisconnected",
	"GroundFault",
	"ImmediateReset",
	"Local",
	"LocalOutOfCredit",
	"MasterPass",
	"Other",
	"OvercurrentFault",
	"PowerLoss",
	"PowerQuality",
	"Reboot",
	"Remote",
	"SOCLimitReached",
	"StoppedByEV",
	"TimeLimitReached",
	"Timeout",
}
var enumValues_TransactionEventEnumType = []interface{}{
	"Ended",
	"Started",
	"Updated",
}
var enumValues_TransactionEventEnumType_1 = []interface{}{
	"Ended",
	"Started",
	"Updated",
}
var enumValues_TriggerReasonEnumType = []interface{}{
	"Authorized",
	"CablePluggedIn",
	"ChargingRateChanged",
	"ChargingStateChanged",
	"Deauthorized",
	"EnergyLimitReached",
	"EVCommunicationLost",
	"EVConnectTimeout",
	"MeterValueClock",
	"MeterValuePeriodic",
	"TimeLimitReached",
	"Trigger",
	"UnlockCommand",
	"StopAuthorized",
	"EVDeparted",
	"EVDetected",
	"RemoteStop",
	"RemoteStart",
	"AbnormalCondition",
	"SignedDataReceived",
	"ResetCommand",
}
var enumValues_TriggerReasonEnumType_1 = []interface{}{
	"Authorized",
	"CablePluggedIn",
	"ChargingRateChanged",
	"ChargingStateChanged",
	"Deauthorized",
	"EnergyLimitReached",
	"EVCommunicationLost",
	"EVConnectTimeout",
	"MeterValueClock",
	"MeterValuePeriodic",
	"TimeLimitReached",
	"Trigger",
	"UnlockCommand",
	"StopAuthorized",
	"EVDeparted",
	"EVDetected",
	"RemoteStop",
	"RemoteStart",
	"AbnormalCondition",
	"SignedDataReceived",
	"ResetCommand",
}
