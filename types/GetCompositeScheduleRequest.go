// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package main

import "fmt"
import "reflect"
import "encoding/json"

// UnmarshalJSON implements json.Unmarshaler.
func (j *CustomDataType) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["vendorId"]; !ok || v == nil {
		return fmt.Errorf("field vendorId in CustomDataType: required")
	}
	type Plain CustomDataType
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CustomDataType(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ChargingRateUnitEnumType_1) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ChargingRateUnitEnumType_1 {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ChargingRateUnitEnumType_1, v)
	}
	*j = ChargingRateUnitEnumType_1(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ChargingRateUnitEnumType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ChargingRateUnitEnumType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ChargingRateUnitEnumType, v)
	}
	*j = ChargingRateUnitEnumType(v)
	return nil
}

type ChargingRateUnitEnumType string

const ChargingRateUnitEnumTypeA ChargingRateUnitEnumType = "A"
const ChargingRateUnitEnumTypeW ChargingRateUnitEnumType = "W"

type ChargingRateUnitEnumType_1 string

const ChargingRateUnitEnumType_1_A ChargingRateUnitEnumType_1 = "A"
const ChargingRateUnitEnumType_1_W ChargingRateUnitEnumType_1 = "W"

// This class does not get 'AdditionalProperties = false' in the schema generation,
// so it can be extended with arbitrary JSON properties to allow adding custom
// data.
type CustomDataType struct {
	// VendorId corresponds to the JSON schema field "vendorId".
	VendorId string `json:"vendorId" yaml:"vendorId"`
}

type GetCompositeScheduleRequestJson struct {
	// ChargingRateUnit corresponds to the JSON schema field "chargingRateUnit".
	ChargingRateUnit *ChargingRateUnitEnumType_1 `json:"chargingRateUnit,omitempty" yaml:"chargingRateUnit,omitempty"`

	// CustomData corresponds to the JSON schema field "customData".
	CustomData *CustomDataType `json:"customData,omitempty" yaml:"customData,omitempty"`

	// Length of the requested schedule in seconds.
	//
	//
	Duration int `json:"duration" yaml:"duration"`

	// The ID of the EVSE for which the schedule is requested. When evseid=0, the
	// Charging Station will calculate the expected consumption for the grid
	// connection.
	//
	EvseId int `json:"evseId" yaml:"evseId"`
}

var enumValues_ChargingRateUnitEnumType = []interface{}{
	"W",
	"A",
}
var enumValues_ChargingRateUnitEnumType_1 = []interface{}{
	"W",
	"A",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetCompositeScheduleRequestJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["duration"]; !ok || v == nil {
		return fmt.Errorf("field duration in GetCompositeScheduleRequestJson: required")
	}
	if v, ok := raw["evseId"]; !ok || v == nil {
		return fmt.Errorf("field evseId in GetCompositeScheduleRequestJson: required")
	}
	type Plain GetCompositeScheduleRequestJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = GetCompositeScheduleRequestJson(plain)
	return nil
}
