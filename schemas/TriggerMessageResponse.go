// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package main

import "fmt"
import "encoding/json"
import "reflect"

// This class does not get 'AdditionalProperties = false' in the schema generation,
// so it can be extended with arbitrary JSON properties to allow adding custom
// data.
type CustomDataType struct {
	// VendorId corresponds to the JSON schema field "vendorId".
	VendorId string `json:"vendorId" yaml:"vendorId"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CustomDataType) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["vendorId"]; !ok || v == nil {
		return fmt.Errorf("field vendorId in CustomDataType: required")
	}
	type Plain CustomDataType
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CustomDataType(plain)
	return nil
}

// Element providing more information about the status.
//
type StatusInfoType struct {
	// Additional text to provide detailed information.
	//
	AdditionalInfo *string `json:"additionalInfo,omitempty" yaml:"additionalInfo,omitempty"`

	// CustomData corresponds to the JSON schema field "customData".
	CustomData *CustomDataType `json:"customData,omitempty" yaml:"customData,omitempty"`

	// A predefined code for the reason why the status is returned in this response.
	// The string is case-insensitive.
	//
	ReasonCode string `json:"reasonCode" yaml:"reasonCode"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *StatusInfoType) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["reasonCode"]; !ok || v == nil {
		return fmt.Errorf("field reasonCode in StatusInfoType: required")
	}
	type Plain StatusInfoType
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = StatusInfoType(plain)
	return nil
}

type TriggerMessageResponseJson struct {
	// CustomData corresponds to the JSON schema field "customData".
	CustomData *CustomDataType `json:"customData,omitempty" yaml:"customData,omitempty"`

	// Status corresponds to the JSON schema field "status".
	Status TriggerMessageStatusEnumType_1 `json:"status" yaml:"status"`

	// StatusInfo corresponds to the JSON schema field "statusInfo".
	StatusInfo *StatusInfoType `json:"statusInfo,omitempty" yaml:"statusInfo,omitempty"`
}

type TriggerMessageStatusEnumType string

// UnmarshalJSON implements json.Unmarshaler.
func (j *TriggerMessageStatusEnumType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TriggerMessageStatusEnumType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TriggerMessageStatusEnumType, v)
	}
	*j = TriggerMessageStatusEnumType(v)
	return nil
}

const TriggerMessageStatusEnumTypeAccepted TriggerMessageStatusEnumType = "Accepted"

// UnmarshalJSON implements json.Unmarshaler.
func (j *TriggerMessageStatusEnumType_1) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TriggerMessageStatusEnumType_1 {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TriggerMessageStatusEnumType_1, v)
	}
	*j = TriggerMessageStatusEnumType_1(v)
	return nil
}

const TriggerMessageStatusEnumTypeNotImplemented TriggerMessageStatusEnumType = "NotImplemented"
const TriggerMessageStatusEnumTypeRejected TriggerMessageStatusEnumType = "Rejected"

type TriggerMessageStatusEnumType_1 string

const TriggerMessageStatusEnumType_1_Accepted TriggerMessageStatusEnumType_1 = "Accepted"
const TriggerMessageStatusEnumType_1_NotImplemented TriggerMessageStatusEnumType_1 = "NotImplemented"
const TriggerMessageStatusEnumType_1_Rejected TriggerMessageStatusEnumType_1 = "Rejected"

var enumValues_TriggerMessageStatusEnumType = []interface{}{
	"Accepted",
	"Rejected",
	"NotImplemented",
}
var enumValues_TriggerMessageStatusEnumType_1 = []interface{}{
	"Accepted",
	"Rejected",
	"NotImplemented",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TriggerMessageResponseJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["status"]; !ok || v == nil {
		return fmt.Errorf("field status in TriggerMessageResponseJson: required")
	}
	type Plain TriggerMessageResponseJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = TriggerMessageResponseJson(plain)
	return nil
}
