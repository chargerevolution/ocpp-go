// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package main

import "fmt"
import "encoding/json"
import "reflect"

// UnmarshalJSON implements json.Unmarshaler.
func (j *UnpublishFirmwareStatusEnumType_1) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_UnpublishFirmwareStatusEnumType_1 {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_UnpublishFirmwareStatusEnumType_1, v)
	}
	*j = UnpublishFirmwareStatusEnumType_1(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CustomDataType) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["vendorId"]; !ok || v == nil {
		return fmt.Errorf("field vendorId in CustomDataType: required")
	}
	type Plain CustomDataType
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CustomDataType(plain)
	return nil
}

// This class does not get 'AdditionalProperties = false' in the schema generation,
// so it can be extended with arbitrary JSON properties to allow adding custom
// data.
type CustomDataType struct {
	// VendorId corresponds to the JSON schema field "vendorId".
	VendorId string `json:"vendorId" yaml:"vendorId"`
}

type UnpublishFirmwareResponseJson struct {
	// CustomData corresponds to the JSON schema field "customData".
	CustomData *CustomDataType `json:"customData,omitempty" yaml:"customData,omitempty"`

	// Status corresponds to the JSON schema field "status".
	Status UnpublishFirmwareStatusEnumType_1 `json:"status" yaml:"status"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *UnpublishFirmwareStatusEnumType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_UnpublishFirmwareStatusEnumType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_UnpublishFirmwareStatusEnumType, v)
	}
	*j = UnpublishFirmwareStatusEnumType(v)
	return nil
}

type UnpublishFirmwareStatusEnumType string

const UnpublishFirmwareStatusEnumTypeDownloadOngoing UnpublishFirmwareStatusEnumType = "DownloadOngoing"
const UnpublishFirmwareStatusEnumTypeNoFirmware UnpublishFirmwareStatusEnumType = "NoFirmware"
const UnpublishFirmwareStatusEnumTypeUnpublished UnpublishFirmwareStatusEnumType = "Unpublished"

type UnpublishFirmwareStatusEnumType_1 string

const UnpublishFirmwareStatusEnumType_1_DownloadOngoing UnpublishFirmwareStatusEnumType_1 = "DownloadOngoing"
const UnpublishFirmwareStatusEnumType_1_NoFirmware UnpublishFirmwareStatusEnumType_1 = "NoFirmware"
const UnpublishFirmwareStatusEnumType_1_Unpublished UnpublishFirmwareStatusEnumType_1 = "Unpublished"

var enumValues_UnpublishFirmwareStatusEnumType = []interface{}{
	"DownloadOngoing",
	"NoFirmware",
	"Unpublished",
}
var enumValues_UnpublishFirmwareStatusEnumType_1 = []interface{}{
	"DownloadOngoing",
	"NoFirmware",
	"Unpublished",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *UnpublishFirmwareResponseJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["status"]; !ok || v == nil {
		return fmt.Errorf("field status in UnpublishFirmwareResponseJson: required")
	}
	type Plain UnpublishFirmwareResponseJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = UnpublishFirmwareResponseJson(plain)
	return nil
}
