// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package main

import "fmt"
import "encoding/json"
import "reflect"

// This class does not get 'AdditionalProperties = false' in the schema generation,
// so it can be extended with arbitrary JSON properties to allow adding custom
// data.
type CustomDataType struct {
	// VendorId corresponds to the JSON schema field "vendorId".
	VendorId string `json:"vendorId" yaml:"vendorId"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CustomDataType) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["vendorId"]; !ok || v == nil {
		return fmt.Errorf("field vendorId in CustomDataType: required")
	}
	type Plain CustomDataType
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CustomDataType(plain)
	return nil
}

type MonitoringBaseEnumType string

// UnmarshalJSON implements json.Unmarshaler.
func (j *MonitoringBaseEnumType_1) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_MonitoringBaseEnumType_1 {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_MonitoringBaseEnumType_1, v)
	}
	*j = MonitoringBaseEnumType_1(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MonitoringBaseEnumType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_MonitoringBaseEnumType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_MonitoringBaseEnumType, v)
	}
	*j = MonitoringBaseEnumType(v)
	return nil
}

const MonitoringBaseEnumTypeAll MonitoringBaseEnumType = "All"
const MonitoringBaseEnumTypeFactoryDefault MonitoringBaseEnumType = "FactoryDefault"
const MonitoringBaseEnumTypeHardWiredOnly MonitoringBaseEnumType = "HardWiredOnly"

type MonitoringBaseEnumType_1 string

const MonitoringBaseEnumType_1_All MonitoringBaseEnumType_1 = "All"
const MonitoringBaseEnumType_1_FactoryDefault MonitoringBaseEnumType_1 = "FactoryDefault"
const MonitoringBaseEnumType_1_HardWiredOnly MonitoringBaseEnumType_1 = "HardWiredOnly"

type SetMonitoringBaseRequestJson struct {
	// CustomData corresponds to the JSON schema field "customData".
	CustomData *CustomDataType `json:"customData,omitempty" yaml:"customData,omitempty"`

	// MonitoringBase corresponds to the JSON schema field "monitoringBase".
	MonitoringBase MonitoringBaseEnumType_1 `json:"monitoringBase" yaml:"monitoringBase"`
}

var enumValues_MonitoringBaseEnumType = []interface{}{
	"All",
	"FactoryDefault",
	"HardWiredOnly",
}
var enumValues_MonitoringBaseEnumType_1 = []interface{}{
	"All",
	"FactoryDefault",
	"HardWiredOnly",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetMonitoringBaseRequestJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["monitoringBase"]; !ok || v == nil {
		return fmt.Errorf("field monitoringBase in SetMonitoringBaseRequestJson: required")
	}
	type Plain SetMonitoringBaseRequestJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SetMonitoringBaseRequestJson(plain)
	return nil
}
