// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package main

import "fmt"
import "encoding/json"
import "reflect"

// UnmarshalJSON implements json.Unmarshaler.
func (j *LogEnumType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LogEnumType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LogEnumType, v)
	}
	*j = LogEnumType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CustomDataType) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["vendorId"]; !ok || v == nil {
		return fmt.Errorf("field vendorId in CustomDataType: required")
	}
	type Plain CustomDataType
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CustomDataType(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LogEnumType_1) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LogEnumType_1 {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LogEnumType_1, v)
	}
	*j = LogEnumType_1(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LogParametersType) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["remoteLocation"]; !ok || v == nil {
		return fmt.Errorf("field remoteLocation in LogParametersType: required")
	}
	type Plain LogParametersType
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = LogParametersType(plain)
	return nil
}

// This class does not get 'AdditionalProperties = false' in the schema generation,
// so it can be extended with arbitrary JSON properties to allow adding custom
// data.
type CustomDataType struct {
	// VendorId corresponds to the JSON schema field "vendorId".
	VendorId string `json:"vendorId" yaml:"vendorId"`
}

type GetLogRequestJson struct {
	// CustomData corresponds to the JSON schema field "customData".
	CustomData *CustomDataType `json:"customData,omitempty" yaml:"customData,omitempty"`

	// Log corresponds to the JSON schema field "log".
	Log LogParametersType `json:"log" yaml:"log"`

	// LogType corresponds to the JSON schema field "logType".
	LogType LogEnumType_1 `json:"logType" yaml:"logType"`

	// The Id of this request
	//
	RequestId int `json:"requestId" yaml:"requestId"`

	// This specifies how many times the Charging Station must try to upload the log
	// before giving up. If this field is not present, it is left to Charging Station
	// to decide how many times it wants to retry.
	//
	Retries *int `json:"retries,omitempty" yaml:"retries,omitempty"`

	// The interval in seconds after which a retry may be attempted. If this field is
	// not present, it is left to Charging Station to decide how long to wait between
	// attempts.
	//
	RetryInterval *int `json:"retryInterval,omitempty" yaml:"retryInterval,omitempty"`
}

type LogEnumType string

const LogEnumTypeDiagnosticsLog LogEnumType = "DiagnosticsLog"
const LogEnumTypeSecurityLog LogEnumType = "SecurityLog"

type LogEnumType_1 string

const LogEnumType_1_DiagnosticsLog LogEnumType_1 = "DiagnosticsLog"
const LogEnumType_1_SecurityLog LogEnumType_1 = "SecurityLog"

// Log
// urn:x-enexis:ecdm:uid:2:233373
// Generic class for the configuration of logging entries.
//
type LogParametersType struct {
	// CustomData corresponds to the JSON schema field "customData".
	CustomData *CustomDataType `json:"customData,omitempty" yaml:"customData,omitempty"`

	// Log. Latest_ Timestamp. Date_ Time
	// urn:x-enexis:ecdm:uid:1:569482
	// This contains the date and time of the latest logging information to include in
	// the diagnostics.
	//
	LatestTimestamp *string `json:"latestTimestamp,omitempty" yaml:"latestTimestamp,omitempty"`

	// Log. Oldest_ Timestamp. Date_ Time
	// urn:x-enexis:ecdm:uid:1:569477
	// This contains the date and time of the oldest logging information to include in
	// the diagnostics.
	//
	OldestTimestamp *string `json:"oldestTimestamp,omitempty" yaml:"oldestTimestamp,omitempty"`

	// Log. Remote_ Location. URI
	// urn:x-enexis:ecdm:uid:1:569484
	// The URL of the location at the remote system where the log should be stored.
	//
	RemoteLocation string `json:"remoteLocation" yaml:"remoteLocation"`
}

var enumValues_LogEnumType = []interface{}{
	"DiagnosticsLog",
	"SecurityLog",
}
var enumValues_LogEnumType_1 = []interface{}{
	"DiagnosticsLog",
	"SecurityLog",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetLogRequestJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["log"]; !ok || v == nil {
		return fmt.Errorf("field log in GetLogRequestJson: required")
	}
	if v, ok := raw["logType"]; !ok || v == nil {
		return fmt.Errorf("field logType in GetLogRequestJson: required")
	}
	if v, ok := raw["requestId"]; !ok || v == nil {
		return fmt.Errorf("field requestId in GetLogRequestJson: required")
	}
	type Plain GetLogRequestJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = GetLogRequestJson(plain)
	return nil
}
