// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package main

import "fmt"
import "encoding/json"
import "reflect"

// This class does not get 'AdditionalProperties = false' in the schema generation,
// so it can be extended with arbitrary JSON properties to allow adding custom
// data.
type CustomDataType struct {
	// VendorId corresponds to the JSON schema field "vendorId".
	VendorId string `json:"vendorId" yaml:"vendorId"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CustomDataType) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["vendorId"]; !ok || v == nil {
		return fmt.Errorf("field vendorId in CustomDataType: required")
	}
	type Plain CustomDataType
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CustomDataType(plain)
	return nil
}

// AC_ Charging_ Parameters
// urn:x-oca:ocpp:uid:2:233250
// EV AC charging parameters.
//
//
type ACChargingParametersType struct {
	// CustomData corresponds to the JSON schema field "customData".
	CustomData *CustomDataType `json:"customData,omitempty" yaml:"customData,omitempty"`

	// AC_ Charging_ Parameters. Energy_ Amount. Energy_ Amount
	// urn:x-oca:ocpp:uid:1:569211
	// Amount of energy requested (in Wh). This includes energy required for
	// preconditioning.
	//
	EnergyAmount int `json:"energyAmount" yaml:"energyAmount"`

	// AC_ Charging_ Parameters. EV_ Max. Current
	// urn:x-oca:ocpp:uid:1:569213
	// Maximum current (amps) supported by the electric vehicle (per phase). Includes
	// cable capacity.
	//
	EvMaxCurrent int `json:"evMaxCurrent" yaml:"evMaxCurrent"`

	// AC_ Charging_ Parameters. EV_ Max. Voltage
	// urn:x-oca:ocpp:uid:1:569214
	// Maximum voltage supported by the electric vehicle
	//
	EvMaxVoltage int `json:"evMaxVoltage" yaml:"evMaxVoltage"`

	// AC_ Charging_ Parameters. EV_ Min. Current
	// urn:x-oca:ocpp:uid:1:569212
	// Minimum current (amps) supported by the electric vehicle (per phase).
	//
	EvMinCurrent int `json:"evMinCurrent" yaml:"evMinCurrent"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ACChargingParametersType) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["energyAmount"]; !ok || v == nil {
		return fmt.Errorf("field energyAmount in ACChargingParametersType: required")
	}
	if v, ok := raw["evMaxCurrent"]; !ok || v == nil {
		return fmt.Errorf("field evMaxCurrent in ACChargingParametersType: required")
	}
	if v, ok := raw["evMaxVoltage"]; !ok || v == nil {
		return fmt.Errorf("field evMaxVoltage in ACChargingParametersType: required")
	}
	if v, ok := raw["evMinCurrent"]; !ok || v == nil {
		return fmt.Errorf("field evMinCurrent in ACChargingParametersType: required")
	}
	type Plain ACChargingParametersType
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ACChargingParametersType(plain)
	return nil
}

// DC_ Charging_ Parameters
// urn:x-oca:ocpp:uid:2:233251
// EV DC charging parameters
//
//
//
type DCChargingParametersType struct {
	// DC_ Charging_ Parameters. Bulk_ SOC. Percentage
	// urn:x-oca:ocpp:uid:1:569222
	// Percentage of SoC at which the EV considers a fast charging process to end.
	// (possible values: 0 - 100)
	//
	BulkSoC *int `json:"bulkSoC,omitempty" yaml:"bulkSoC,omitempty"`

	// CustomData corresponds to the JSON schema field "customData".
	CustomData *CustomDataType `json:"customData,omitempty" yaml:"customData,omitempty"`

	// DC_ Charging_ Parameters. Energy_ Amount. Energy_ Amount
	// urn:x-oca:ocpp:uid:1:569217
	// Amount of energy requested (in Wh). This inludes energy required for
	// preconditioning.
	//
	EnergyAmount *int `json:"energyAmount,omitempty" yaml:"energyAmount,omitempty"`

	// DC_ Charging_ Parameters. EV_ Energy_ Capacity. Numeric
	// urn:x-oca:ocpp:uid:1:569220
	// Capacity of the electric vehicle battery (in Wh)
	//
	EvEnergyCapacity *int `json:"evEnergyCapacity,omitempty" yaml:"evEnergyCapacity,omitempty"`

	// DC_ Charging_ Parameters. EV_ Max. Current
	// urn:x-oca:ocpp:uid:1:569215
	// Maximum current (amps) supported by the electric vehicle. Includes cable
	// capacity.
	//
	EvMaxCurrent int `json:"evMaxCurrent" yaml:"evMaxCurrent"`

	// DC_ Charging_ Parameters. EV_ Max. Power
	// urn:x-oca:ocpp:uid:1:569218
	// Maximum power (in W) supported by the electric vehicle. Required for DC
	// charging.
	//
	EvMaxPower *int `json:"evMaxPower,omitempty" yaml:"evMaxPower,omitempty"`

	// DC_ Charging_ Parameters. EV_ Max. Voltage
	// urn:x-oca:ocpp:uid:1:569216
	// Maximum voltage supported by the electric vehicle
	//
	EvMaxVoltage int `json:"evMaxVoltage" yaml:"evMaxVoltage"`

	// DC_ Charging_ Parameters. Full_ SOC. Percentage
	// urn:x-oca:ocpp:uid:1:569221
	// Percentage of SoC at which the EV considers the battery fully charged.
	// (possible values: 0 - 100)
	//
	FullSoC *int `json:"fullSoC,omitempty" yaml:"fullSoC,omitempty"`

	// DC_ Charging_ Parameters. State_ Of_ Charge. Numeric
	// urn:x-oca:ocpp:uid:1:569219
	// Energy available in the battery (in percent of the battery capacity)
	//
	StateOfCharge *int `json:"stateOfCharge,omitempty" yaml:"stateOfCharge,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DCChargingParametersType) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["evMaxCurrent"]; !ok || v == nil {
		return fmt.Errorf("field evMaxCurrent in DCChargingParametersType: required")
	}
	if v, ok := raw["evMaxVoltage"]; !ok || v == nil {
		return fmt.Errorf("field evMaxVoltage in DCChargingParametersType: required")
	}
	type Plain DCChargingParametersType
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = DCChargingParametersType(plain)
	return nil
}

type EnergyTransferModeEnumType string

// UnmarshalJSON implements json.Unmarshaler.
func (j *EnergyTransferModeEnumType_1) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_EnergyTransferModeEnumType_1 {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_EnergyTransferModeEnumType_1, v)
	}
	*j = EnergyTransferModeEnumType_1(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *EnergyTransferModeEnumType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_EnergyTransferModeEnumType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_EnergyTransferModeEnumType, v)
	}
	*j = EnergyTransferModeEnumType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ChargingNeedsType) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["requestedEnergyTransfer"]; !ok || v == nil {
		return fmt.Errorf("field requestedEnergyTransfer in ChargingNeedsType: required")
	}
	type Plain ChargingNeedsType
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ChargingNeedsType(plain)
	return nil
}

// Charging_ Needs
// urn:x-oca:ocpp:uid:2:233249
//
type ChargingNeedsType struct {
	// AcChargingParameters corresponds to the JSON schema field
	// "acChargingParameters".
	AcChargingParameters *ACChargingParametersType `json:"acChargingParameters,omitempty" yaml:"acChargingParameters,omitempty"`

	// CustomData corresponds to the JSON schema field "customData".
	CustomData *CustomDataType `json:"customData,omitempty" yaml:"customData,omitempty"`

	// DcChargingParameters corresponds to the JSON schema field
	// "dcChargingParameters".
	DcChargingParameters *DCChargingParametersType `json:"dcChargingParameters,omitempty" yaml:"dcChargingParameters,omitempty"`

	// Charging_ Needs. Departure_ Time. Date_ Time
	// urn:x-oca:ocpp:uid:1:569223
	// Estimated departure time of the EV.
	//
	DepartureTime *string `json:"departureTime,omitempty" yaml:"departureTime,omitempty"`

	// RequestedEnergyTransfer corresponds to the JSON schema field
	// "requestedEnergyTransfer".
	RequestedEnergyTransfer EnergyTransferModeEnumType `json:"requestedEnergyTransfer" yaml:"requestedEnergyTransfer"`
}

const EnergyTransferModeEnumTypeACSinglePhase EnergyTransferModeEnumType = "AC_single_phase"
const EnergyTransferModeEnumTypeACThreePhase EnergyTransferModeEnumType = "AC_three_phase"
const EnergyTransferModeEnumTypeACTwoPhase EnergyTransferModeEnumType = "AC_two_phase"
const EnergyTransferModeEnumTypeDC EnergyTransferModeEnumType = "DC"

type EnergyTransferModeEnumType_1 string

const EnergyTransferModeEnumType_1_ACSinglePhase EnergyTransferModeEnumType_1 = "AC_single_phase"
const EnergyTransferModeEnumType_1_ACThreePhase EnergyTransferModeEnumType_1 = "AC_three_phase"
const EnergyTransferModeEnumType_1_ACTwoPhase EnergyTransferModeEnumType_1 = "AC_two_phase"
const EnergyTransferModeEnumType_1_DC EnergyTransferModeEnumType_1 = "DC"

type NotifyEVChargingNeedsRequestJson struct {
	// ChargingNeeds corresponds to the JSON schema field "chargingNeeds".
	ChargingNeeds ChargingNeedsType `json:"chargingNeeds" yaml:"chargingNeeds"`

	// CustomData corresponds to the JSON schema field "customData".
	CustomData *CustomDataType `json:"customData,omitempty" yaml:"customData,omitempty"`

	// Defines the EVSE and connector to which the EV is connected. EvseId may not be
	// 0.
	//
	EvseId int `json:"evseId" yaml:"evseId"`

	// Contains the maximum schedule tuples the car supports per schedule.
	//
	MaxScheduleTuples *int `json:"maxScheduleTuples,omitempty" yaml:"maxScheduleTuples,omitempty"`
}

var enumValues_EnergyTransferModeEnumType = []interface{}{
	"DC",
	"AC_single_phase",
	"AC_two_phase",
	"AC_three_phase",
}
var enumValues_EnergyTransferModeEnumType_1 = []interface{}{
	"DC",
	"AC_single_phase",
	"AC_two_phase",
	"AC_three_phase",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NotifyEVChargingNeedsRequestJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["chargingNeeds"]; !ok || v == nil {
		return fmt.Errorf("field chargingNeeds in NotifyEVChargingNeedsRequestJson: required")
	}
	if v, ok := raw["evseId"]; !ok || v == nil {
		return fmt.Errorf("field evseId in NotifyEVChargingNeedsRequestJson: required")
	}
	type Plain NotifyEVChargingNeedsRequestJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = NotifyEVChargingNeedsRequestJson(plain)
	return nil
}
